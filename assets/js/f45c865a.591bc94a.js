"use strict";(self.webpackChunkhades_2_mod_wiki=self.webpackChunkhades_2_mod_wiki||[]).push([[78957],{13601:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>l,frontMatter:()=>i,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"h2m-docs/classes/definitions/rom.pointer","title":"rom.pointer.lua","description":"","source":"@site/docs/h2m-docs/classes/definitions/rom.pointer.md","sourceDirName":"h2m-docs/classes/definitions","slug":"/h2m-docs/classes/definitions/rom.pointer","permalink":"/Hades2ModWiki/docs/h2m-docs/classes/definitions/rom.pointer","draft":false,"unlisted":false,"editUrl":"https://github.com/sgg-modding/hades2modwiki/tree/main/docs/h2m-docs/classes/definitions/rom.pointer.md","tags":[],"version":"current","frontMatter":{"title":"rom.pointer.lua"},"sidebar":"tutorialSidebar","previous":{"title":"rom.lua_patch.lua","permalink":"/Hades2ModWiki/docs/h2m-docs/classes/definitions/rom.lua_patch"},"next":{"title":"rom.value_wrapper.lua","permalink":"/Hades2ModWiki/docs/h2m-docs/classes/definitions/rom.value_wrapper"}}');var r=n(74848),o=n(28453);const i={title:"rom.pointer.lua"},s=void 0,d={},u=[];function h(e){const t={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:"---@meta pointer\n\n-- Class representing a 64-bit memory address.\n---@class (exact) rom.pointer\n\n\n-- Returns a memory instance, with the given address.\n---@param address integer Address\n---@return pointer\nfunction pointer:new(address) end\n\n-- Adds an offset to the current memory address and returns a new pointer object.\n---@param offset integer offset\n---@return pointer # new pointer object.\nfunction pointer:add(offset) end\n\n-- Subs an offset to the current memory address and returns a new pointer object.\n---@param offset integer offset\n---@return pointer # new pointer object.\nfunction pointer:sub(offset) end\n\n-- Rips the current memory address and returns a new pointer object.\n---@param offset integer offset\n---@return pointer # new pointer object.\nfunction pointer:rip(offset) end\n\n-- Rips (cmp instruction) the current memory address and returns a new pointer object.\n---@param offset integer offset\n---@return pointer # new pointer object.\nfunction pointer:rip_cmp(offset) end\n\n-- Retrieves the value stored at the memory address as the specified type.\n---@return number # the value stored at the memory address as the specified type.\nfunction pointer:get_byte() end\n\n-- Retrieves the value stored at the memory address as the specified type.\n---@return number # the value stored at the memory address as the specified type.\nfunction pointer:get_word() end\n\n-- Retrieves the value stored at the memory address as the specified type.\n---@return number # the value stored at the memory address as the specified type.\nfunction pointer:get_dword() end\n\n-- Retrieves the value stored at the memory address as the specified type.\n---@return number # the value stored at the memory address as the specified type.\nfunction pointer:get_float() end\n\n-- Retrieves the value stored at the memory address as the specified type.\n---@return number # the value stored at the memory address as the specified type.\nfunction pointer:get_double() end\n\n-- Retrieves the value stored at the memory address as the specified type.\n---@return number # the value stored at the memory address as the specified type.\nfunction pointer:get_qword() end\n\n-- Sets the value at the memory address to the specified value of the given type.\n---@param value number new value.\nfunction pointer:set_byte(value) end\n\n-- Sets the value at the memory address to the specified value of the given type.\n---@param value number new value.\nfunction pointer:set_word(value) end\n\n-- Sets the value at the memory address to the specified value of the given type.\n---@param value number new value.\nfunction pointer:set_dword(value) end\n\n-- Sets the value at the memory address to the specified value of the given type.\n---@param value number new value.\nfunction pointer:set_float(value) end\n\n-- Sets the value at the memory address to the specified value of the given type.\n---@param value number new value.\nfunction pointer:set_double(value) end\n\n-- Sets the value at the memory address to the specified value of the given type.\n---@param value number new value.\nfunction pointer:set_qword(value) end\n\n-- Retrieves the value stored at the memory address as the specified type.\n---@return string # the value stored at the memory address as the specified type.\nfunction pointer:get_string() end\n\n-- Sets the value at the memory address to the specified value of the given type.\n---@param value string new value.\nfunction pointer:set_string(value) end\n\n-- Creates a memory patch for modifying the value at the memory address with the specified value.\n--The modified value is applied when you call the apply function on the lua_patch object.\n--The original value is restored when you call the restore function on the lua_patch object.\n---@param value number new value.\n---@return lua_patch # memory patch instance for modifying the value at the memory address with the specified value. Can call apply / restore on the object.\nfunction pointer:patch_byte(value) end\n\n-- Creates a memory patch for modifying the value at the memory address with the specified value.\n--The modified value is applied when you call the apply function on the lua_patch object.\n--The original value is restored when you call the restore function on the lua_patch object.\n---@param value number new value.\n---@return lua_patch # memory patch instance for modifying the value at the memory address with the specified value. Can call apply / restore on the object.\nfunction pointer:patch_word(value) end\n\n-- Creates a memory patch for modifying the value at the memory address with the specified value.\n--The modified value is applied when you call the apply function on the lua_patch object.\n--The original value is restored when you call the restore function on the lua_patch object.\n---@param value number new value.\n---@return lua_patch # memory patch instance for modifying the value at the memory address with the specified value. Can call apply / restore on the object.\nfunction pointer:patch_dword(value) end\n\n-- Creates a memory patch for modifying the value at the memory address with the specified value.\n--The modified value is applied when you call the apply function on the lua_patch object.\n--The original value is restored when you call the restore function on the lua_patch object.\n---@param value number new value.\n---@return lua_patch # memory patch instance for modifying the value at the memory address with the specified value. Can call apply / restore on the object.\nfunction pointer:patch_qword(value) end\n\n-- Creates a memory patch for modifying the value at the memory address with the specified value.\n--The modified value is applied when you call the apply function on the lua_patch object.\n--The original value is restored when you call the restore function on the lua_patch object.\n---@param value number new value.\n---@return lua_patch # memory patch instance for modifying the value at the memory address with the specified value. Can call apply / restore on the object.\nfunction pointer:patch_float(value) end\n\n-- Creates a memory patch for modifying the value at the memory address with the specified value.\n--The modified value is applied when you call the apply function on the lua_patch object.\n--The original value is restored when you call the restore function on the lua_patch object.\n---@param value number new value.\n---@return lua_patch # memory patch instance for modifying the value at the memory address with the specified value. Can call apply / restore on the object.\nfunction pointer:patch_double(value) end\n\n---@return boolean # Returns true if the address is null.\nfunction pointer:is_null() end\n\n---@return boolean # Returns true if the address is not null.\nfunction pointer:is_valid() end\n\n-- Dereferences the memory address and returns a new pointer object pointing to the value at that address.\n---@return pointer # A new pointer object pointing to the value at that address.\nfunction pointer:deref() end\n\n-- Retrieves the memory address stored in the pointer object.\n---@return number # The memory address stored in the pointer object as a number.\nfunction pointer:get_address() end\n\n"})})}function l(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>s});var a=n(96540);const r={},o=a.createContext(r);function i(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);