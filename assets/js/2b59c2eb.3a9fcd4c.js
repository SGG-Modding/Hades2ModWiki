"use strict";(self.webpackChunkhades_2_mod_wiki=self.webpackChunkhades_2_mod_wiki||[]).push([[34395],{21347:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>f,contentTitle:()=>a,default:()=>l,frontMatter:()=>c,metadata:()=>t,toc:()=>r});const t=JSON.parse('{"id":"h2m-docs/classes/definitions/rom.config.config_file","title":"rom.config.config_file.lua","description":"","source":"@site/docs/h2m-docs/classes/definitions/rom.config.config_file.md","sourceDirName":"h2m-docs/classes/definitions","slug":"/h2m-docs/classes/definitions/rom.config.config_file","permalink":"/Hades2ModWiki/docs/h2m-docs/classes/definitions/rom.config.config_file","draft":false,"unlisted":false,"editUrl":"https://github.com/sgg-modding/hades2modwiki/tree/main/docs/h2m-docs/classes/definitions/rom.config.config_file.md","tags":[],"version":"current","frontMatter":{"title":"rom.config.config_file.lua"},"sidebar":"tutorialSidebar","previous":{"title":"rom.config.config_entry.lua","permalink":"/Hades2ModWiki/docs/h2m-docs/classes/definitions/rom.config.config_entry"},"next":{"title":"rom.lua_patch.lua","permalink":"/Hades2ModWiki/docs/h2m-docs/classes/definitions/rom.lua_patch"}}');var o=i(74848),s=i(28453);const c={title:"rom.config.config_file.lua"},a=void 0,f={},r=[];function d(e){const n={code:"code",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-lua",children:"---@meta config.config_file\n\n-- A helper class to handle persistent data.\n---@class (exact) rom.config.config_file\n---@field owner_guid string # The owner GUID of this config file.\n---@field config_file_path string # The file path of this config file.\n---@field entries table{'<'}config.config_definition, config.config_entry> # All config entries of the config file.\n\n-- Create a new config file at the specified config path.\n---@param config_path string Full path to a file that contains settings. The file will be created as needed. It's recommended to use `.cfg` as the file extension. The mod manager will pick it up and make it show nicely inside the mod manager UI.\n---@param save_on_init boolean If the config file/directory doesn't exist, create it immediately.\n---@return config.config_file\nfunction config.config_file:new(config_path, save_on_init) end\n\n-- Create a new setting. The setting is saved to drive and loaded automatically.\n--Each section and key pair can be used to add only one setting,\n--trying to add a second setting will throw an exception.\n---@param section string Section/category/group of the setting. Settings are grouped by this.\n---@param key string Name of the setting.\n---@param default_value boolean|number|string Value of the setting if the setting was not created yet.\n---@param description string Simple description of the setting shown to the user.\n---@return config.config_entry # new config_entry object.\nfunction config.config_file:bind(section, key, default_value, description) end\n\n-- Removes a setting from the config file.\n---@param section string Section/category/group of the setting. Settings are grouped by this.\n---@param key string Name of the setting.\nfunction config.config_file:remove(section, key) end\n\n-- Writes the config to disk.\nfunction config.config_file:save() end\n\n-- Reloads the config from disk. Unsaved changes are lost.\nfunction config.config_file:reload() end\n\n"})})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>a});var t=i(96540);const o={},s=t.createContext(o);function c(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);