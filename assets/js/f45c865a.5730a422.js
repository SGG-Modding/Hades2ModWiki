"use strict";(self.webpackChunkhades_2_mod_wiki=self.webpackChunkhades_2_mod_wiki||[]).push([[78957],{13601:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>l,frontMatter:()=>i,metadata:()=>n,toc:()=>u});const n=JSON.parse('{"id":"h2m-docs/classes/definitions/rom.pointer","title":"rom.pointer.lua","description":"","source":"@site/docs/h2m-docs/classes/definitions/rom.pointer.md","sourceDirName":"h2m-docs/classes/definitions","slug":"/h2m-docs/classes/definitions/rom.pointer","permalink":"/Hades2ModWiki/docs/h2m-docs/classes/definitions/rom.pointer","draft":false,"unlisted":false,"editUrl":"https://github.com/sgg-modding/hades2modwiki/tree/main/docs/h2m-docs/classes/definitions/rom.pointer.md","tags":[],"version":"current","frontMatter":{"title":"rom.pointer.lua"},"sidebar":"tutorialSidebar","previous":{"title":"rom.lua_patch.lua","permalink":"/Hades2ModWiki/docs/h2m-docs/classes/definitions/rom.lua_patch"},"next":{"title":"rom.value_wrapper.lua","permalink":"/Hades2ModWiki/docs/h2m-docs/classes/definitions/rom.value_wrapper"}}');var a=r(74848),o=r(28453);const i={title:"rom.pointer.lua"},s=void 0,d={},u=[];function h(e){const t={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-lua",children:"---@meta pointer\r\n\r\n-- Class representing a 64-bit memory address.\r\n---@class (exact) rom.pointer\r\n\r\n\r\n-- Returns a memory instance, with the given address.\r\n---@param address integer Address\r\n---@return pointer\r\nfunction pointer:new(address) end\r\n\r\n-- Adds an offset to the current memory address and returns a new pointer object.\r\n---@param offset integer offset\r\n---@return pointer # new pointer object.\r\nfunction pointer:add(offset) end\r\n\r\n-- Subs an offset to the current memory address and returns a new pointer object.\r\n---@param offset integer offset\r\n---@return pointer # new pointer object.\r\nfunction pointer:sub(offset) end\r\n\r\n-- Rips the current memory address and returns a new pointer object.\r\n---@param offset integer offset\r\n---@return pointer # new pointer object.\r\nfunction pointer:rip(offset) end\r\n\r\n-- Rips (cmp instruction) the current memory address and returns a new pointer object.\r\n---@param offset integer offset\r\n---@return pointer # new pointer object.\r\nfunction pointer:rip_cmp(offset) end\r\n\r\n-- Retrieves the value stored at the memory address as the specified type.\r\n---@return number # the value stored at the memory address as the specified type.\r\nfunction pointer:get_byte() end\r\n\r\n-- Retrieves the value stored at the memory address as the specified type.\r\n---@return number # the value stored at the memory address as the specified type.\r\nfunction pointer:get_word() end\r\n\r\n-- Retrieves the value stored at the memory address as the specified type.\r\n---@return number # the value stored at the memory address as the specified type.\r\nfunction pointer:get_dword() end\r\n\r\n-- Retrieves the value stored at the memory address as the specified type.\r\n---@return number # the value stored at the memory address as the specified type.\r\nfunction pointer:get_float() end\r\n\r\n-- Retrieves the value stored at the memory address as the specified type.\r\n---@return number # the value stored at the memory address as the specified type.\r\nfunction pointer:get_double() end\r\n\r\n-- Retrieves the value stored at the memory address as the specified type.\r\n---@return number # the value stored at the memory address as the specified type.\r\nfunction pointer:get_qword() end\r\n\r\n-- Sets the value at the memory address to the specified value of the given type.\r\n---@param value number new value.\r\nfunction pointer:set_byte(value) end\r\n\r\n-- Sets the value at the memory address to the specified value of the given type.\r\n---@param value number new value.\r\nfunction pointer:set_word(value) end\r\n\r\n-- Sets the value at the memory address to the specified value of the given type.\r\n---@param value number new value.\r\nfunction pointer:set_dword(value) end\r\n\r\n-- Sets the value at the memory address to the specified value of the given type.\r\n---@param value number new value.\r\nfunction pointer:set_float(value) end\r\n\r\n-- Sets the value at the memory address to the specified value of the given type.\r\n---@param value number new value.\r\nfunction pointer:set_double(value) end\r\n\r\n-- Sets the value at the memory address to the specified value of the given type.\r\n---@param value number new value.\r\nfunction pointer:set_qword(value) end\r\n\r\n-- Retrieves the value stored at the memory address as the specified type.\r\n---@return string # the value stored at the memory address as the specified type.\r\nfunction pointer:get_string() end\r\n\r\n-- Sets the value at the memory address to the specified value of the given type.\r\n---@param value string new value.\r\nfunction pointer:set_string(value) end\r\n\r\n-- Creates a memory patch for modifying the value at the memory address with the specified value.\r\n--The modified value is applied when you call the apply function on the lua_patch object.\r\n--The original value is restored when you call the restore function on the lua_patch object.\r\n---@param value number new value.\r\n---@return lua_patch # memory patch instance for modifying the value at the memory address with the specified value. Can call apply / restore on the object.\r\nfunction pointer:patch_byte(value) end\r\n\r\n-- Creates a memory patch for modifying the value at the memory address with the specified value.\r\n--The modified value is applied when you call the apply function on the lua_patch object.\r\n--The original value is restored when you call the restore function on the lua_patch object.\r\n---@param value number new value.\r\n---@return lua_patch # memory patch instance for modifying the value at the memory address with the specified value. Can call apply / restore on the object.\r\nfunction pointer:patch_word(value) end\r\n\r\n-- Creates a memory patch for modifying the value at the memory address with the specified value.\r\n--The modified value is applied when you call the apply function on the lua_patch object.\r\n--The original value is restored when you call the restore function on the lua_patch object.\r\n---@param value number new value.\r\n---@return lua_patch # memory patch instance for modifying the value at the memory address with the specified value. Can call apply / restore on the object.\r\nfunction pointer:patch_dword(value) end\r\n\r\n-- Creates a memory patch for modifying the value at the memory address with the specified value.\r\n--The modified value is applied when you call the apply function on the lua_patch object.\r\n--The original value is restored when you call the restore function on the lua_patch object.\r\n---@param value number new value.\r\n---@return lua_patch # memory patch instance for modifying the value at the memory address with the specified value. Can call apply / restore on the object.\r\nfunction pointer:patch_qword(value) end\r\n\r\n-- Creates a memory patch for modifying the value at the memory address with the specified value.\r\n--The modified value is applied when you call the apply function on the lua_patch object.\r\n--The original value is restored when you call the restore function on the lua_patch object.\r\n---@param value number new value.\r\n---@return lua_patch # memory patch instance for modifying the value at the memory address with the specified value. Can call apply / restore on the object.\r\nfunction pointer:patch_float(value) end\r\n\r\n-- Creates a memory patch for modifying the value at the memory address with the specified value.\r\n--The modified value is applied when you call the apply function on the lua_patch object.\r\n--The original value is restored when you call the restore function on the lua_patch object.\r\n---@param value number new value.\r\n---@return lua_patch # memory patch instance for modifying the value at the memory address with the specified value. Can call apply / restore on the object.\r\nfunction pointer:patch_double(value) end\r\n\r\n---@return boolean # Returns true if the address is null.\r\nfunction pointer:is_null() end\r\n\r\n---@return boolean # Returns true if the address is not null.\r\nfunction pointer:is_valid() end\r\n\r\n-- Dereferences the memory address and returns a new pointer object pointing to the value at that address.\r\n---@return pointer # A new pointer object pointing to the value at that address.\r\nfunction pointer:deref() end\r\n\r\n-- Retrieves the memory address stored in the pointer object.\r\n---@return number # The memory address stored in the pointer object as a number.\r\nfunction pointer:get_address() end\r\n\n"})})}function l(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>s});var n=r(96540);const a={},o=n.createContext(a);function i(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);