"use strict";(self.webpackChunkhades_2_mod_wiki=self.webpackChunkhades_2_mod_wiki||[]).push([[20976],{2775:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>u,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});const l=JSON.parse('{"id":"h2m-docs/tables/ImGui","title":"Table: ImGui","description":"You can find all the supported functions and overloads below.","source":"@site/docs/h2m-docs/tables/ImGui.md","sourceDirName":"h2m-docs/tables","slug":"/h2m-docs/tables/ImGui","permalink":"/Hades2ModWiki/docs/h2m-docs/tables/ImGui","draft":false,"unlisted":false,"editUrl":"https://github.com/sgg-modding/hades2modwiki/tree/main/docs/h2m-docs/tables/ImGui.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"rom.tolk.lua","permalink":"/Hades2ModWiki/docs/h2m-docs/tables/definitions/rom.tolk"},"next":{"title":"Table: rom.audio","permalink":"/Hades2ModWiki/docs/h2m-docs/tables/rom.audio"}}');var t=n(74848),a=n(28453);const i={},u="Table: ImGui",o={},s=[{value:"Windows",id:"windows",level:2},{value:"Child Windows",id:"child-windows",level:2},{value:"Windows Utilities",id:"windows-utilities",level:2},{value:"Content Region",id:"content-region",level:2},{value:"Windows Scrolling",id:"windows-scrolling",level:2},{value:"Parameters Stacks (Shared)",id:"parameters-stacks-shared",level:2},{value:"Parameter Stacks (Current Window)",id:"parameter-stacks-current-window",level:2},{value:"Cursor / Layout",id:"cursor--layout",level:2},{value:"ID Stack / Scopes",id:"id-stack--scopes",level:2},{value:"Widgets: Text",id:"widgets-text",level:2},{value:"Widgets: Main",id:"widgets-main",level:2},{value:"Widgets: Combo Box",id:"widgets-combo-box",level:2},{value:"Widgets: Drags",id:"widgets-drags",level:2},{value:"Widgets: Sliders",id:"widgets-sliders",level:2},{value:"Widgets: Input with Keyboard",id:"widgets-input-with-keyboard",level:2},{value:"Widgets: Color Editor / Picker",id:"widgets-color-editor--picker",level:2},{value:"Widgets: Trees",id:"widgets-trees",level:2},{value:"Widgets: Selectables",id:"widgets-selectables",level:2},{value:"Widgets: List Boxes",id:"widgets-list-boxes",level:2},{value:"Widgets: Value() Helpers",id:"widgets-value-helpers",level:2},{value:"Widgets: Menus",id:"widgets-menus",level:2},{value:"Tooltips",id:"tooltips",level:2},{value:"Popups, Modals",id:"popups-modals",level:2},{value:"Tables",id:"tables",level:2},{value:"Columns (Legacy API, prefer using Tables!)",id:"columns-legacy-api-prefer-using-tables",level:2},{value:"Tab Bars, Tabs",id:"tab-bars-tabs",level:2},{value:"Disabling",id:"disabling",level:2},{value:"Clipping",id:"clipping",level:2},{value:"Focus, Activation",id:"focus-activation",level:2},{value:"Item / Widgets Utilities",id:"item--widgets-utilities",level:2},{value:"Miscellaneous Utilities",id:"miscellaneous-utilities",level:2},{value:"Text Utilities",id:"text-utilities",level:2},{value:"Color Utilities",id:"color-utilities",level:2},{value:"Inputs Utilities: Mouse",id:"inputs-utilities-mouse",level:2},{value:"Inputs Utilities: Keyboard",id:"inputs-utilities-keyboard",level:2},{value:"Clipboard Utilities",id:"clipboard-utilities",level:2}];function m(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"table-imgui",children:"Table: ImGui"})}),"\n",(0,t.jsx)(r.h1,{id:"documentation",children:"Documentation"}),"\n",(0,t.jsx)(r.p,{children:"You can find all the supported functions and overloads below."}),"\n",(0,t.jsx)(r.h2,{id:"windows",children:"Windows"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'  -- ImGui.ShowDemoWindow()\r\n\r\n  -- ImGui.Begin(...)\r\n  -- Parameters: text (name), bool (open) [O], ImGuiWindowFlags (flags) [O]\r\n  -- Returns A: bool (shouldDraw)\r\n  -- Returns B & C: bool (open), bool (shouldDraw)\r\n  -- Overloads\r\n  shouldDraw = ImGui.Begin("Name")\r\n  shouldDraw = ImGui.Begin("Name", ImGuiWindowFlags.NoMove)\r\n  open, shouldDraw = ImGui.Begin("Name", open)\r\n  open, shouldDraw = ImGui.Begin("Name", open, ImGuiWindowFlags.NoMove)\r\n\r\n  -- ImGui.End()\r\n  ImGui.End()\n'})}),"\n",(0,t.jsx)(r.h2,{id:"child-windows",children:"Child Windows"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'  -- ImGui.BeginChild(...)\r\n  -- Parameters: text (name), float (size_x) [O], float (size_y) [O], bool (border) [O], ImGuiWindowFlags (flags) [O]\r\n  -- Returns: bool (shouldDraw)\r\n  -- Overloads\r\n  shouldDraw = ImGui.BeginChild("Name")\r\n  shouldDraw = ImGui.BeginChild("Name", 100)\r\n  shouldDraw = ImGui.BeginChild("Name", 100, 200)\r\n  shouldDraw = ImGui.BeginChild("Name", 100, 200, true)\r\n  shouldDraw = ImGui.BeginChild("Name", 100, 200, true, ImGuiWindowFlags.NoMove)\r\n\r\n  -- ImGui.EndChild()\r\n  ImGui.EndChild()\n'})}),"\n",(0,t.jsx)(r.h2,{id:"windows-utilities",children:"Windows Utilities"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'  -- ImGui.IsWindowAppearing()\r\n  -- Returns: bool (appearing)\r\n  appearing = ImGui.IsWindowAppearing()\r\n\r\n  -- ImGui.IsWindowCollapsed()\r\n  -- Returns: bool (collapsed)\r\n  collapsed = ImGui.IsWindowCollapsed()\r\n\r\n  -- ImGui.IsWindowFocused(...)\r\n  -- Parameters: ImGuiFocusedFlags (flags) [O]\r\n  -- Returns: bool (focused)\r\n  -- Overloads\r\n  focused = ImGui.IsWindowFocused()\r\n  focused = ImGui.IsWindowFocused(ImGuiFocusedFlags.ChildWindows)\r\n\r\n  -- ImGui.IsWindowHovered(...)\r\n  -- Parameters: ImGuiHoveredFlags (flags) [O]\r\n  -- Returns: bool (hovered)\r\n  -- Overloads\r\n  hovered = ImGui.IswindowHovered()\r\n  hovered = ImGui.IsWindowHovered(ImGuiHoveredFlags.ChildWindows)\r\n\r\n  -- ImGui.GetWindowDpiScale()\r\n  -- Returns: float (dpiScale)\r\n  dpiScale = ImGui.GetWindowDpiScale()\r\n\r\n  -- ImGui.GetWindowPos()\r\n  -- Returns: float (pos_x), float (pos_y)\r\n  pos_x, pos_y = ImGui.GetWindowPos()\r\n\r\n  -- ImGui.GetWindowSize()\r\n  -- Returns: float (size_x), float (size_y)\r\n  size_x, size_y = ImGui.GetWindowSize()\r\n\r\n  -- ImGui.GetWindowWidth()\r\n  -- Returns: float (width)\r\n  width = ImGui.GetWindowWidth()\r\n\r\n  -- ImGui.GetWindowHeight()\r\n  -- Returns: float (height)\r\n  height = ImGui.GetWindowHeight()\r\n\r\n  -- ImGui.SetNextWindowPos(...)\r\n  -- Parameters: float (pos_x), float (pos_y), ImGuiCond (cond) [O], float (pivot_x) [O], float (pivot_y) [O]\r\n  -- Overloads\r\n  ImGui.SetNextWindowPos(100, 100)\r\n  ImGui.SetNextWindowPos(100, 100, ImGuiCond.Always)\r\n  ImGui.SetNextWindowPos(100, 100, ImGuiCond.Always, 0, 0.5)\r\n\r\n  -- ImGui.SetNextWindowSize(...)\r\n  -- Parameters: float (size_x), float (size_y), ImGuiCond (cond) [O]\r\n  -- Overloads\r\n  ImGui.SetNextWindowSize(500, 500)\r\n  ImGui.SetNextWindowSize(500, 500, ImGuiCond.Appearing)\r\n\r\n  -- ImGui.SetNextWindowSizeConstraints(...)\r\n  -- Parameters: float (min_x), float (min_y), float (max_x), float (max_y)\r\n  ImGui.SetNextWindowSizeConstraints(100, 100, 500, 600)\r\n\r\n  -- ImGui.SetNextWindowContentSize(...)\r\n  -- Parameters: float (size_x), float (size_y)\r\n  ImGui.SetNextWindowContentSize(200, 100)\r\n\r\n  -- ImGui.SetNextWindowCollapsed(...)\r\n  -- Parameters: bool (collapsed), ImGuiCond (cond) [O]\r\n  -- Overloads\r\n  ImGui.SetNextWindowCollapsed(true)\r\n  ImGui.SetNextWindowCollapsed(true, ImGuiCond.Appearing)\r\n\r\n  -- ImGui.SetNextWindowFocus()\r\n  ImGui.SetNextWindowFocus()\r\n\r\n  -- ImGui.SetNextWindowBgAlpha(...)\r\n  -- Parameters: float (alpha)\r\n  ImGui.SetNextWindowBgAlpha(0.5)\r\n\r\n  -- ImGui.SetWindowPos(...)\r\n  -- Parameters: float (pos_x), float (pos_y), ImguiCond (cond) [O]\r\n  -- Overloads\r\n  ImGui.SetWindowPos(100, 100)\r\n  ImGui.SetWindowPos(100, 100, ImGuiCond.Appearing)\r\n\r\n  -- ImGui.SetWindowSize(...)\r\n  -- Parameters: float (size_x), float (size_y), ImguiCond (cond) [O]\r\n  -- Overloads\r\n  ImGui.SetWindowSize(100, 300)\r\n  ImGui.SetWindowSize(100, 300, ImGuiCond.Appearing)\r\n\r\n  -- ImGui.SetWindowCollapsed(...)\r\n  -- Parameters: bool (collapsed), ImguiCond (cond) [O]\r\n  -- Overloads\r\n  ImGui.SetWindowCollapsed(false)\r\n  ImGui.SetWindowCollapsed(true, ImGuiCond.Appearing)\r\n\r\n  -- ImGui.SetWindowFocus()\r\n  ImGui.SetWindowFocus()\r\n\r\n  -- ImGui.SetWindowFontScale(...)\r\n  -- Parameters: float (scale)\r\n  ImGui.SetWindowFontScale(1.2)\r\n\r\n  -- ImGui.SetWindowPos(...)\r\n  -- Parameters: text (name), float (pos_x), float (pos_y), ImGuiCond (cond) [O]\r\n  -- Overloads\r\n  ImGui.SetWindowPos("WindowName", 100, 100)\r\n  ImGui.SetWindowPos("WindowName", 100, 100, ImGuiCond.Always)\r\n\r\n  -- ImGui.SetWindowSize(...)\r\n  -- Parameters: text (name), float (size_x), float (size_y), ImGuiCond (cond) [O]\r\n  -- Overloads\r\n  ImGui.SetWindowSize("WindowName", 300, 400)\r\n  ImGui.SetWindowSize("WindowName", 300, 400, ImGuiCond.Always)\r\n\r\n  -- ImGui.SetWindowCollapsed(...)\r\n  -- Parameters: text (name), bool (collapsed), ImGuiCond (cond) [O]\r\n  -- Overloads\r\n  ImGui.SetWindowCollapsed("WindowName", true)\r\n  ImGui.SetWindowCollapsed("WindowName", false, ImGuiCond.Always)\r\n\r\n  -- ImGui.SetWindowFocus(...)\r\n  -- Parameters: text (name)\r\n  ImGui.SetWindowFocus("WindowName")\n'})}),"\n",(0,t.jsx)(r.h2,{id:"content-region",children:"Content Region"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:"  -- ImGui.GetContentRegionMax()\r\n  -- Returns: float (x), float (y)\r\n  x, y = ImGui.GetContentRegionMax()\r\n\r\n  -- ImGui.GetContentRegionAvail()\r\n  -- Returns: float (x), float (y)\r\n  x, y = ImGui.GetContentRegionAvail()\r\n\r\n  -- ImGui.GetWindowContentRegionMin()\r\n  -- Returns: float (x), float (y)\r\n  x, y = ImGui.GetWindowContentRegionMin()\r\n\r\n  -- ImGui.GetWindowContentRegionMax()\r\n  -- Returns: float (x), float (y)\r\n  x, y = ImGui.GetWindowContentRegionMax()\r\n\r\n  -- ImGui.GetWindowContentRegionWidth()\r\n  -- Returns: float (width)\r\n  width = ImGui.GetWindowContentRegionWidth()\n"})}),"\n",(0,t.jsx)(r.h2,{id:"windows-scrolling",children:"Windows Scrolling"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:"  -- ImGui.GetScrollX()\r\n  -- Returns: float (x)\r\n  x = ImGui.GetScrollX()\r\n\r\n  -- ImGui.GetScrollY()\r\n  -- Returns: float (y)\r\n  y = ImGui.GetScrollY()\r\n\r\n  -- ImGui.GetScrollMaxX()\r\n  -- Returns: float (x)\r\n  x = ImGui.GetScrollMaxX()\r\n\r\n  -- ImGui.GetScrollMaxY()\r\n  -- Returns: float (y)\r\n  y = ImGui.GetScrollMaxY()\r\n\r\n  -- ImGui.SetScrollX(...)\r\n  -- Parameters: float (scroll_x)\r\n  ImGui.SetScrollX(0.7)\r\n\r\n  -- ImGui.SetScrollY(...)\r\n  -- Parameters: float (scroll_y)\r\n  ImGui.SetScrollY(0.7)\r\n\r\n  -- ImGui.SetScrollHereX(...)\r\n  -- Parameters: float (center_x_ratio) [O]\r\n  -- Overloads\r\n  ImGui.SetScrollHereX()\r\n  ImGui.SetScrollHereX(0.5)\r\n\r\n  -- ImGui.SetScrollHereY(...)\r\n  -- Parameters: float (center_y_ratio) [O]\r\n  -- Overloads\r\n  ImGui.SetScrollHereY()\r\n  ImGui.SetScrollHereY(0.5)\r\n\r\n  -- ImGui.SetScrollFromPosX(...)\r\n  -- Parameters: float (local_x), float (center_x_ratio) [O]\r\n  -- Overloads\r\n  ImGui.SetScrollFromPosX(10)\r\n  ImGui.SetScrollFromPosX(10, 0.5)\r\n\r\n  -- ImGui.SetScrollFromPosY(...)\r\n  -- Parameters: float (local_y), float (center_y_ratio) [O]\r\n  -- Overloads\r\n  ImGui.SetScrollFromPosY(10)\r\n  ImGui.SetScrollFromPosY(10, 0.5)\n"})}),"\n",(0,t.jsx)(r.h2,{id:"parameters-stacks-shared",children:"Parameters Stacks (Shared)"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:"  -- ImGui.PushStyleColor(...)\r\n  -- Parameters A: ImGuiCol (idx), int (color_u32)\r\n  -- Parameters B: ImGuiCol (idx), float (color_r), float (color_g), float (color_b), float (color_a)\r\n  -- Overloads\r\n  ImGui.PushStyleColor(ImGuiCol.Tab, 0xF42069FF)\r\n  ImGui.PushStyleColor(ImGuiCol.Border, 1, 0, 0, 1)\r\n\r\n  -- ImGui.PopStyleColor(...)\r\n  -- Parameters: int (count) [O]\r\n  -- Overloads\r\n  ImGui.PopStyleColor()\r\n  ImGui.PopStyleColor(5)\r\n\r\n  -- ImGui.PushStyleVar(...)\r\n  -- Parameters A: ImGuiStyleVar (idx), float (value)\r\n  -- Parameters B: ImGuiStyleVar (idx), float (value_x), float (value_y)\r\n  -- Overloads\r\n  ImGui.PushStyleVar(ImGuiStyleVar.Alpha, 0.5)\r\n  ImGui.PushStyleVar(ImGuiStyleVar.WindowPadding, 0.2, 0.1)\r\n\r\n  -- ImGui.PopStyleVar(...)\r\n  -- Parameters: int (count) [O]\r\n  ImGui.PopStyleVar()\r\n  ImGui.PopStyleVar(2)\r\n\r\n  -- ImGui.GetStyleColorVec4(...)\r\n  -- Parameters: ImGuiCol (idx)\r\n  -- Returns: float (color_r), float (color_g), float (color_b), float (color_a)\r\n  color_r, color_g, color_b, color_a = ImGui.GetStyleColorVec4(ImGuiCol.Text)\r\n\r\n  -- ImGui.GetFontSize()\r\n  -- Returns: float (fontSize)\r\n  fontSize = ImGui.GetFontSize()\r\n\r\n  -- ImGui.GetFontTexUvWhitePixel()\r\n  -- Returns: float (x), float (y)\r\n  x, y = ImGui.GetFontTexUvWhitePixel()\r\n\r\n  -- ImGui.GetColorU32(...)\r\n  -- Parameters A: ImGuiCol (idx), float (alphaMultiplier, usually stays at 1)\r\n  -- Parameters B: float (color_r), float (color_g), float (color_b), float (color_a)\r\n  -- Returns: int (color_u32)\r\n  -- Overloads\r\n  color_u32 = ImGui.GetColorU32(ImGuiCol.Text, 1)\r\n  color_u32 = ImGui.GetColorU32(0, 1, 0, 1)\r\n\n"})}),"\n",(0,t.jsx)(r.h2,{id:"parameter-stacks-current-window",children:"Parameter Stacks (Current Window)"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:"  -- ImGui.PushItemWidth(...)\r\n  -- Parameters: float (width)\r\n  ImGui.PushItemWidth(100)\r\n\r\n  -- ImGui.PopItemWidth()\r\n  ImGui.PopItemWidth()\r\n\r\n  -- ImGui.SetNextItemWidth(...)\r\n  -- Parameters: float (width)\r\n  ImGui.SetNextItemWidth(100)\r\n\r\n  -- ImGui.CalcItemWidth()\r\n  -- Returns: float (width)\r\n  width = ImGui.CalcItemWidth()\r\n\r\n  -- ImGui.PushTextWrapPos(...)\r\n  -- Parameters: float (wrap_local_pos_x) [O]\r\n  -- Overloads\r\n  ImGui.PushTextWrapPos()\r\n  ImGui.PushTextWrapPos(50)\r\n\r\n  -- ImGui.PopTextWrapPos()\r\n  ImGui.PopTextWrapPos()\r\n\r\n  -- ImGui.PushAllowKeyboardFocus(...)\r\n  -- Parameters: bool (allow_keyboard_focus)\r\n  ImGui.PushAllowKeyboardFocus(true)\r\n\r\n  -- ImGui.PopAllowKeyboardFocus()\r\n  ImGui.PopAllowKeyboardFocus()\r\n\r\n  -- ImGui.PushButtonRepeat(...)\r\n  -- Parameters: bool (repeat)\r\n  ImGui.PushButtonRepeat(true)\r\n\r\n  -- ImGui.PopButtonRepeat()\r\n  ImGui.PopButtonRepeat()\n"})}),"\n",(0,t.jsx)(r.h2,{id:"cursor--layout",children:"Cursor / Layout"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:"  -- ImGui.Separator()\r\n  ImGui.Separator\r\n\r\n  -- ImGui.SameLine(...)\r\n  -- Parameters: float (offset_from_start_x) [O], float (spacing) [O]\r\n  -- Overloads\r\n  ImGui.SameLine()\r\n  ImGui.SameLine(100)\r\n  ImGui.SameLine(100, 5)\r\n\r\n  -- ImGui.NewLine()\r\n  ImGui.NewLine()\r\n\r\n  -- ImGui.Spacing()\r\n  ImGui.Spacing()\r\n\r\n  -- ImGui.Dummy(...)\r\n  -- Parameters: float (size_x), float (size_y)\r\n  ImGui.Dummy(100, 200)\r\n\r\n  -- ImGui.Indent(...)\r\n  -- Parameters: float (indent_w) [O]\r\n  ImGui.Indent()\r\n  ImGui.Indent(10)\r\n\r\n  -- ImGui.Unindent(...)\r\n  -- Parameters: float (indent_w) [O]\r\n  ImGui.Unindent()\r\n  ImGui.Unindent(-10)\r\n\r\n  -- ImGui.BeginGroup()\r\n  ImGui.BeginGroup()\r\n\r\n  -- ImGui.EndGroup()\r\n  ImGui.EndGroup()\r\n\r\n  -- ImGui.GetCursorPos()\r\n  -- Returns: float (x), float(y)\r\n  x, y = ImGui.GetCursorPos()\r\n\r\n  -- ImGui.GetCursorPosX()\r\n  -- Returns: float (x)\r\n  x = ImGui.GetCursorPosX()\r\n\r\n  -- ImGui.GetCursorPosY()\r\n  -- Returns: float (y)\r\n  y = ImGui.GetCursorPosY()\r\n\r\n  -- ImGui.SetCursorPos(...)\r\n  -- Parameters: float (x), float (y)\r\n  ImGui.SetCursorPos(10, 10)\r\n\r\n  -- ImGui.SetCursorPosX(...)\r\n  -- Parameters: float (x)\r\n  ImGui.SetCursorPosX(10)\r\n\r\n  -- ImGui.SetCursorPosY(...)\r\n  -- Parameters: float (y)\r\n  ImGui.SetCursorPosY(10)\r\n\r\n  -- ImGui.GetCursorStartPos()\r\n  -- Returns: float (x), float(y)\r\n  x, y = ImGui.GetCursorStartPos()\r\n\r\n  -- ImGui.GetCursorScreenPos()\r\n  -- Returns: float (x), float(y)\r\n  x, y = ImGui.GetCursorScreenPos()\r\n\r\n  -- ImGui.SetCursorScreenPos(...)\r\n  -- Parameters: float (x), float (y)\r\n  ImGui.SetCursorScreenPos(10, 10)\r\n\r\n  -- ImGui.AlignTextToFramePadding()\r\n  ImGui.AlignTextToFramePadding()\r\n\r\n  -- ImGui.GetTextLineHeight()\r\n  -- Returns: float (height)\r\n  height = ImGui.GetTextLineHeight()\r\n\r\n  -- ImGui.GetTextLineHeightWithSpacing()\r\n  -- Returns: float (height)\r\n  height = ImGui.GetTextLineHeightWithSpacing()\r\n\r\n  -- ImGui.GetFrameHeight()\r\n  -- Returns: float (height)\r\n  height = ImGui.GetFrameHeight()\r\n\r\n  -- ImGui.GetFrameHeightWithSpacing()\r\n  -- Returns: float (height)\r\n  height = ImGui.GetFrameHeightWithSpacing()\n"})}),"\n",(0,t.jsx)(r.h2,{id:"id-stack--scopes",children:"ID Stack / Scopes"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'  -- ImGui.PushID(...)\r\n  -- Parameters A: text (str_id)\r\n  -- Parameters B: int (int_id)\r\n  -- Overloads\r\n  ImGui.PushID("MyID")\r\n  ImGui.PushID(1)\r\n\r\n  -- ImGui.PopID()\r\n  ImGui.PopID()\r\n\r\n  -- ImGui.GetID(...)\r\n  -- Parameters A: text (str_id)\r\n  -- Returns: int (id)\r\n  -- Overloads\r\n  id = ImGui.GetID("MyID")\n'})}),"\n",(0,t.jsx)(r.h2,{id:"widgets-text",children:"Widgets: Text"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'  -- ImGui.TextUnformatted(...)\r\n  -- Parameters: text (text)\r\n  -- Overloads\r\n  ImGui.TextUnformatted("I am Unformatted")\r\n\r\n  -- ImGui.Text(...)\r\n  -- Parameters: text (text)\r\n  ImGui.Text("Well hello there, General Kenobi")\r\n\r\n  -- ImGui.TextColored(...)\r\n  -- Parameters: float (color_r), float (color_g), float (color_b), float (color_a), text (text)\r\n  ImGui.TextColored(1, 0, 0, 1, "Well hello there, General Kenobi")\r\n\r\n  -- ImGui.TextDisabled(...)\r\n  -- Parameters: text (text)\r\n  ImGui.TextDisabled("Well hello there, General Kenobi")\r\n\r\n  -- ImGui.TextWrapped(...)\r\n  -- Parameters: text (text)\r\n  ImGui.TextWrapped("Well hello there, General Kenobi")\r\n\r\n  -- ImGui.LabelText(...)\r\n  -- Parameters: text (label), text (text)\r\n  ImGui.LabelText("Well hello there", "General Kenobi")\r\n\r\n  -- ImGui.BulletText(...)\r\n  -- Parameters: text (text)\r\n  ImGui.BulletText("Well hello there, General Kenobi")\n'})}),"\n",(0,t.jsx)(r.h2,{id:"widgets-main",children:"Widgets: Main"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'  -- ImGui.Button(...)\r\n  -- Parameters: text (label), float (size_x) [O], float (size_y) [O]\r\n  -- Returns: bool (clicked)\r\n  -- Overloads\r\n  clicked = ImGui.Button("Label")\r\n  clicked = ImGui.Button("Label", 100, 50)\r\n\r\n  -- ImGui.SmallButton(...)\r\n  -- Parameters: text (label)\r\n  -- Returns: bool (clicked)\r\n  clicked = ImGui.SmallButton("Label")\r\n\r\n  -- ImGui.InvisibleButton(...)\r\n  -- Parameters: text (label), float (size_x), float (size_y)\r\n  -- Returns: bool (clicked)\r\n  clicked = ImGui.InvisibleButton("Label", 100, 50)\r\n\r\n  -- ImGui.ArrowButton(...)\r\n  -- Parameters: text (str_id), ImGuiDir (dir)\r\n  -- Returns: bool (clicked)\r\n  clicked = ImGui.ArrowButton("I have an arrow", ImGuiDir.Down)\r\n\r\n  -- ImGui.Checkbox(...)\r\n  -- Parameters: text (label), bool (value)\r\n  -- Returns: bool (value), bool (pressed)\r\n  value, pressed = ImGui.Checkbox("My Checkbox", value)\r\n\r\n  -- ImGui.RadioButton(...)\r\n  -- Parameters A: text (label), bool (active)\r\n  -- Parameters B: text (label), int (value), int (v_button)\r\n  -- Returns A: bool (pressed)\r\n  -- Returns B: int (value), bool (pressed)\r\n  -- Overloads\r\n  pressed = ImGui.RadioButton("Click me", pressed == true)\r\n  value, pressed = ImGui.RadioButton("Click me too", value, 2)\r\n\r\n  -- ImGui.ProgressBar(...)\r\n  -- Parameters: float (fraction), float (size_x) [O], float (size_y) [O], text (overlay) [O]\r\n  -- Overloads\r\n  ImGui.ProgressBar(0.5)\r\n  ImGui.ProgressBar(0.5, 100, 25)\r\n  ImGui.ProgressBar(0.5, 100, 25, "Loading Failed. Sike. - 50%")\r\n\r\n  -- ImGui.Bullet()\r\n  ImGui.Bullet()\n'})}),"\n",(0,t.jsx)(r.h2,{id:"widgets-combo-box",children:"Widgets: Combo Box"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'  -- ImGui.BeginCombo(...)\r\n  -- Parameters: text (label), text (previewValue), ImGuiComboFlags (flags) [O]\r\n  -- Returns: bool (shouldDraw)\r\n  -- Overloads\r\n  shouldDraw = ImGui.BeginCombo("My Combo", "Preview")\r\n  shouldDraw = ImGui.BeginCombo("My Combo", "Preview", ImGuiComboFlags.PopupAlignLeft)\r\n\r\n  -- ImGui.EndCombo()\r\n  ImGui.EndCombo()\r\n\r\n  -- ImGui.Combo(...)\r\n  -- Parameters A: text (label), int (current_item), table (items), int (items_count), int (popup_max_height_in_items) [O]\r\n  -- Parameters B: text (label), int (current_item), text (items_separated_by_zeros), int (popup_max_height_in_items) [O]\r\n  -- Returns: int (current_item), bool (clicked)\r\n  -- Overloads\r\n  current_item, clicked = ImGui.Combo("Label", current_item, { "Option 1 ", "Option 2" }, 2)\r\n  current_item, clicked = ImGui.Combo("Label", current_item, { "Option 1 ", "Option 2" }, 2, 5)\r\n  current_item, clicked = ImGui.Combo("Label", current_item, "Option1\\0Option2\\0")\r\n  current_item, clicked = ImGui.Combo("Label", current_item, "Option1\\0Option2\\0", 5)\n'})}),"\n",(0,t.jsx)(r.h2,{id:"widgets-drags",children:"Widgets: Drags"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'  -- ImGui.DragFloat(...)\r\n  -- Parameters: text (label), float (value), float (value_speed) [O], float (value_min) [O], float (value_max) [O], text (format) [O], ImGuiSliderFlags (flags) [O]\r\n  -- Returns: float (value), bool (used)\r\n  -- Overloads\r\n  value, used = ImGui.DragFloat("Label", value)\r\n  value, used = ImGui.DragFloat("Label", value, 0.01)\r\n  value, used = ImGui.DragFloat("Label", value, 0.01, -10)\r\n  value, used = ImGui.DragFloat("Label", value, 0.01, -10, 10)\r\n  value, used = ImGui.DragFloat("Label", value, 0.01, -10, 10, "%.1f")\r\n  value, used = ImGui.DragFloat("Label", value, 0.01, -10, 10, "%.1f", ImGuiSliderFlags.Logarithmic)\r\n\r\n  -- ImGui.DragFloat2(...)\r\n  -- Parameters: text (label), table (values), float (value_speed) [O], float (value_min) [O], float (value_max) [O], text (format) [O], ImGuiSliderFlags (flags) [O]\r\n  -- Returns: table (values), bool (used)\r\n  -- Overloads\r\n  values, used = ImGui.DragFloat2("Label", values)\r\n  values, used = ImGui.DragFloat2("Label", values, 0.01)\r\n  values, used = ImGui.DragFloat2("Label", values, 0.01, -10)\r\n  values, used = ImGui.DragFloat2("Label", values, 0.01, -10, 10)\r\n  values, used = ImGui.DragFloat2("Label", values, 0.01, -10, 10, "%.1f")\r\n  values, used = ImGui.DragFloat2("Label", values, 0.01, -10, 10, "%.1f", ImGuiSliderFlags.Logarithmic)\r\n\r\n  -- ImGui.DragFloat3(...)\r\n  -- Parameters: text (label), table (values), float (value_speed) [O], float (value_min) [O], float (value_max) [O], text (format) [O], ImGuiSliderFlags (flags) [O]\r\n  -- Returns: table (values), bool (used)\r\n  -- Overloads\r\n  values, used = ImGui.DragFloat3("Label", values)\r\n  values, used = ImGui.DragFloat3("Label", values, 0.01)\r\n  values, used = ImGui.DragFloat3("Label", values, 0.01, -10)\r\n  values, used = ImGui.DragFloat3("Label", values, 0.01, -10, 10)\r\n  values, used = ImGui.DragFloat3("Label", values, 0.01, -10, 10, "%.1f")\r\n  values, used = ImGui.DragFloat3("Label", values, 0.01, -10, 10, "%.1f", ImGuiSliderFlags.Logarithmic)\r\n\r\n  -- ImGui.DragFloat4(...)\r\n  -- Parameters: text (label), table (values), float (value_speed) [O], float (value_min) [O], float (value_max) [O], text (format) [O], ImGuiSliderFlags (flags) [O]\r\n  -- Returns: table (values), bool (used)\r\n  -- Overloads\r\n  values, used = ImGui.DragFloat4("Label", values)\r\n  values, used = ImGui.DragFloat4("Label", values, 0.01)\r\n  values, used = ImGui.DragFloat4("Label", values, 0.01, -10)\r\n  values, used = ImGui.DragFloat4("Label", values, 0.01, -10, 10)\r\n  values, used = ImGui.DragFloat4("Label", values, 0.01, -10, 10, "%.1f")\r\n  values, used = ImGui.DragFloat4("Label", values, 0.01, -10, 10, "%.1f", ImGuiSliderFlags.Logarithmic)\r\n\r\n  -- ImGui.DragInt(...)\r\n  -- Parameters: text (label), int (value), float (value_speed) [O], int (value_min) [O], int (value_max) [O], text (format) [O], ImGuiSliderFlags (flags) [O]\r\n  -- Returns: int (value), bool (used)\r\n  -- Overloads\r\n  value, used = ImGui.DragInt("Label", value)\r\n  value, used = ImGui.DragInt("Label", value, 0.01)\r\n  value, used = ImGui.DragInt("Label", value, 0.01, -10)\r\n  value, used = ImGui.DragInt("Label", value, 0.01, -10, 10)\r\n  value, used = ImGui.DragInt("Label", value, 0.01, -10, 10, "%d")\r\n  value, used = ImGui.DragInt("Label", value, 0.01, -10, 10, "%d", ImGuiSliderFlags.Logarithmic)\r\n\r\n  -- ImGui.DragInt2(...)\r\n  -- Parameters: text (label), table (values), float (value_speed) [O], int (value_min) [O], int (value_max) [O], text (format) [O], ImGuiSliderFlags (flags) [O]\r\n  -- Returns: table (values), bool (used)\r\n  -- Overloads\r\n  values, used = ImGui.DragInt2("Label", values)\r\n  values, used = ImGui.DragInt2("Label", values, 0.01)\r\n  values, used = ImGui.DragInt2("Label", values, 0.01, -10)\r\n  values, used = ImGui.DragInt2("Label", values, 0.01, -10, 10)\r\n  values, used = ImGui.DragInt2("Label", values, 0.01, -10, 10, "%d")\r\n  values, used = ImGui.DragInt2("Label", values, 0.01, -10, 10, "%d", ImGuiSliderFlags.Logarithmic)\r\n\r\n  -- ImGui.DragInt3(...)\r\n  -- Parameters: text (label), table (values), float (value_speed) [O], int (value_min) [O], int (value_max) [O], text (format) [O], ImGuiSliderFlags (flags) [O]\r\n  -- Returns: table (values), bool (used)\r\n  -- Overloads\r\n  values, used = ImGui.DragInt3("Label", values)\r\n  values, used = ImGui.DragInt3("Label", values, 0.01)\r\n  values, used = ImGui.DragInt3("Label", values, 0.01, -10)\r\n  values, used = ImGui.DragInt3("Label", values, 0.01, -10, 10)\r\n  values, used = ImGui.DragInt3("Label", values, 0.01, -10, 10, "%d")\r\n  values, used = ImGui.DragInt3("Label", values, 0.01, -10, 10, "%d", ImGuiSliderFlags.Logarithmic)\r\n\r\n  -- ImGui.DragInt4(...)\r\n  -- Parameters: text (label), table (values), float (value_speed) [O], int (value_min) [O], int (value_max) [O], text (format) [O], ImGuiSliderFlags (flags) [O]\r\n  -- Returns: table (values), bool (used)\r\n  -- Overloads\r\n  values, used = ImGui.DragInt4("Label", values)\r\n  values, used = ImGui.DragInt4("Label", values, 0.01)\r\n  values, used = ImGui.DragInt4("Label", values, 0.01, -10)\r\n  values, used = ImGui.DragInt4("Label", values, 0.01, -10, 10)\r\n  values, used = ImGui.DragInt4("Label", values, 0.01, -10, 10, "%d")\r\n  values, used = ImGui.DragInt4("Label", values, 0.01, -10, 10, "%d", ImGuiSliderFlags.Logarithmic)\n'})}),"\n",(0,t.jsx)(r.h2,{id:"widgets-sliders",children:"Widgets: Sliders"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'  -- ImGui.SliderFloat(...)\r\n  -- Parameters: text (label), float (value), float (value_min), float (value_max), text (format) [O], ImGuiSliderFlags (flags) [O]\r\n  -- Returns: float (value), bool (used)\r\n  -- Overloads\r\n  value, used = ImGui.SliderFloat("Label", value, -10, 10)\r\n  value, used = ImGui.SliderFloat("Label", value, -10, 10, "%.1f")\r\n  value, used = ImGui.SliderFloat("Label", value, -10, 10, "%.1f", ImGuiSliderFlags.Logarithmic)\r\n\r\n  -- ImGui.SliderFloat2(...)\r\n  -- Parameters: text (label), table (values), float (value_min), float (value_max), text (format) [O], ImGuiSliderFlags (flags) [O]\r\n  -- Returns: table (values), bool (used)\r\n  -- Overloads\r\n  values, used = ImGui.SliderFloat2("Label", values, 0.01, -10, 10)\r\n  values, used = ImGui.SliderFloat2("Label", values, 0.01, -10, 10, "%.1f")\r\n  values, used = ImGui.SliderFloat2("Label", values, 0.01, -10, 10, "%.1f", ImGuiSliderFlags.Logarithmic)\r\n\r\n  -- ImGui.SliderFloat3(...)\r\n  -- Parameters: text (label), table (values), float (value_min), float (value_max), text (format) [O], ImGuiSliderFlags (flags) [O]\r\n  -- Returns: table (values), bool (used)\r\n  -- Overloads\r\n  values, used = ImGui.SliderFloat3("Label", values, 0.01, -10, 10)\r\n  values, used = ImGui.SliderFloat3("Label", values, 0.01, -10, 10, "%.1f")\r\n  values, used = ImGui.SliderFloat3("Label", values, 0.01, -10, 10, "%.1f", ImGuiSliderFlags.Logarithmic)\r\n\r\n  -- ImGui.SliderFloat4(...)\r\n  -- Parameters: text (label), table (values), float (value_min), float (value_max), text (format) [O], ImGuiSliderFlags (flags) [O]\r\n  -- Returns: table (values), bool (used)\r\n  -- Overloads\r\n  values, used = ImGui.SliderFloat4("Label", values, 0.01, -10, 10)\r\n  values, used = ImGui.SliderFloat4("Label", values, 0.01, -10, 10, "%.1f")\r\n  values, used = ImGui.SliderFloat4("Label", values, 0.01, -10, 10, "%.1f", ImGuiSliderFlags.Logarithmic)\r\n\r\n  -- ImGui.SliderAngle(...)\r\n  -- Parameters: text (label), float (v_rad), float (v_degrees_min) [O], float (v_degrees_max) [O], text (format) [O], ImGuiSliderFlags (flags) [O]\r\n  -- Returns: float (v_rad), bool (used)\r\n  -- Overloads\r\n  v_rad, used = ImGui.SliderAngle("Label", v_rad)\r\n  v_rad, used = ImGui.SliderAngle("Label", v_rad, -255)\r\n  v_rad, used = ImGui.SliderAngle("Label", v_rad, -255, 360)\r\n  v_rad, used = ImGui.SliderAngle("Label", v_rad, -255, 360, "%.0f deg")\r\n  v_rad, used = ImGui.SliderAngle("Label", v_rad, -255, 360, "%.0f deg", ImGuiSliderFlags.Logarithmic)\r\n\r\n  -- ImGui.SliderInt(...)\r\n  -- Parameters: text (label), int (value), int (value_min), int (value_max), text (format) [O], ImGuiSliderFlags (flags) [O]\r\n  -- Returns: int (value), bool (used)\r\n  -- Overloads\r\n  value, used = ImGui.SliderInt("Label", value, -10, 10)\r\n  value, used = ImGui.SliderInt("Label", value, -10, 10, "%d")\r\n  value, used = ImGui.SliderInt("Label", value, -10, 10, "%d", ImGuiSliderFlags.Logarithmic)\r\n\r\n  -- ImGui.SliderInt2(...)\r\n  -- Parameters: text (label), table (values), int (value_min), int (value_max), text (format) [O], ImGuiSliderFlags (flags) [O]\r\n  -- Returns: table (values), bool (used)\r\n  -- Overloads\r\n  values, used = ImGui.SliderInt2("Label", values, -10, 10)\r\n  values, used = ImGui.SliderInt2("Label", values, -10, 10, "%d")\r\n  values, used = ImGui.SliderInt2("Label", values, -10, 10, "%d", ImGuiSliderFlags.Logarithmic)\r\n\r\n  -- ImGui.SliderInt3(...)\r\n  -- Parameters: text (label), table (values), int (value_min), int (value_max), text (format) [O], ImGuiSliderFlags (flags) [O]\r\n  -- Returns: table (values), bool (used)\r\n  -- Overloads\r\n  values, used = ImGui.SliderInt3("Label", values, -10, 10)\r\n  values, used = ImGui.SliderInt3("Label", values, -10, 10, "%d")\r\n  values, used = ImGui.SliderInt3("Label", values, -10, 10, "%d", ImGuiSliderFlags.Logarithmic)\r\n\r\n  -- ImGui.SliderInt4(...)\r\n  -- Parameters: text (label), table (values), int (value_min), int (value_max), text (format) [O], ImGuiSliderFlags (flags) [O]\r\n  -- Returns: table (values), bool (used)\r\n  -- Overloads\r\n  values, used = ImGui.SliderInt4("Label", values, -10, 10)\r\n  values, used = ImGui.SliderInt4("Label", values, -10, 10, "%d")\r\n  values, used = ImGui.SliderInt4("Label", values, -10, 10, "%d", ImGuiSliderFlags.Logarithmic)\r\n\r\n  -- ImGui.VSliderFloat(...)\r\n  -- Parameters: text (label), float (size_x), float (size_y), float (value), float (value_min), float (value_max), text (format) [O], ImGuiSliderFlags (flags) [O]\r\n  -- Returns: float (value), bool (used)\r\n  -- Overloads\r\n  value, used = ImGui.VSliderFloat("Label", 100, 25, value, -10, 10)\r\n  value, used = ImGui.VSliderFloat("Label", 100, 25, value, -10, 10, "%.1f")\r\n  value, used = ImGui.VSliderFloat("Label", 100, 25, value, -10, 10, "%.1f", ImGuiSliderFlags.Logarithmic)\r\n\r\n  -- ImGui.VSliderInt(...)\r\n  -- Parameters: text (label), float (size_x), float (size_y), int (value), int (value_min), int (value_max), text (format) [O], ImGuiSliderFlags (flags) [O]\r\n  -- Returns: int (value), bool (used)\r\n  -- Overloads\r\n  value, used = ImGui.VSliderInt("Label", 100, 25, value, -10, 10)\r\n  value, used = ImGui.VSliderInt("Label", 100, 25, value, -10, 10, "%d")\r\n  value, used = ImGui.VSliderInt("Label", 100, 25, value, -10, 10, "%d", ImGuiSliderFlags.Logarithmic)\n'})}),"\n",(0,t.jsx)(r.h2,{id:"widgets-input-with-keyboard",children:"Widgets: Input with Keyboard"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'  -- ImGui.InputText(...)\r\n  -- Parameters: text (label), text (text), int (buf_size), ImGuiInputTextFlags (flags) [O]\r\n  -- Returns: text (text), bool (selected)\r\n  -- Overloads\r\n  text, selected = ImGui.InputText("Label", text, 100)\r\n  text, selected = ImGui.InputText("Label", text, 100, ImGuiInputTextFlags.ReadOnly)\r\n\r\n  -- ImGui.InputTextMultiline(...)\r\n  -- Parameters: text (label), text (text), int (buf_size), float (size_x) [O], float (size_y) [O], ImGuiInputTextFlags (flags) [O]\r\n  -- Returns: text (text), bool (selected)\r\n  -- Overloads\r\n  text, selected = ImGui.InputTextMultiline("Label", text, 100)\r\n  text, selected = ImGui.InputTextMultiline("Label", text, 100, 200, 35)\r\n  text, selected = ImGui.InputTextMultiline("Label", text, 100, 200, 35, ImGuiInputTextFlags.ReadOnly)\r\n\r\n  -- ImGui.InputTextWithHint(...)\r\n  -- Parameters: text (label), text (hint), text (text), int (buf_size), ImGuiInputTextFlags (flags) [O]\r\n  -- Returns: text (text), bool (selected)\r\n  -- Overloads\r\n  text, selected = ImGui.InputTextWithHint("Label", "Hint", text, 100)\r\n  text, selected = ImGui.InputTextWithHint("Label", "Hint", text, 100, ImGuiInputTextFlags.ReadOnly)\r\n\r\n  -- ImGui.InputFloat(...)\r\n  -- Parameters: text (label), float (value), float (step) [O], float (step_fast) [O], text (format) [O], ImGuiInputTextFlags (flags) [O]\r\n  -- Returns: float (value), bool (used)\r\n  -- Overloads\r\n  value, used = ImGui.InputFloat("Label", value)\r\n  value, used = ImGui.InputFloat("Label", value, 1)\r\n  value, used = ImGui.InputFloat("Label", value, 1, 10)\r\n  value, used = ImGui.InputFloat("Label", value, 1, 10, "%.1f")\r\n  value, used = ImGui.InputFloat("Label", value, 1, 10, "%.1f", ImGuiInputTextFlags.None)\r\n\r\n  -- ImGui.InputFloat2(...)\r\n  -- Parameters: text (label), table (values), text (format) [O], ImGuiInputTextFlags (flags) [O]\r\n  -- Returns: table (values), bool (used)\r\n  -- Overloads\r\n  values, used = ImGui.InputFloat2("Label", values)\r\n  values, used = ImGui.InputFloat2("Label", values, "%.1f")\r\n  values, used = ImGui.InputFloat2("Label", values, "%.1f", ImGuiInputTextFlags.None)\r\n\r\n  -- ImGui.InputFloat3(...)\r\n  -- Parameters: text (label), table (values), text (format) [O], ImGuiInputTextFlags (flags) [O]\r\n  -- Returns: table (values), bool (used)\r\n  -- Overloads\r\n  values, used = ImGui.InputFloat3("Label", values)\r\n  values, used = ImGui.InputFloat3("Label", values, "%.1f")\r\n  values, used = ImGui.InputFloat3("Label", values, "%.1f", ImGuiInputTextFlags.None)\r\n\r\n  -- ImGui.InputFloat4(...)\r\n  -- Parameters: text (label), table (values), text (format) [O], ImGuiInputTextFlags (flags) [O]\r\n  -- Returns: table (values), bool (used)\r\n  -- Overloads\r\n  values, used = ImGui.InputFloat4("Label", values)\r\n  values, used = ImGui.InputFloat4("Label", values, "%.1f")\r\n  values, used = ImGui.InputFloat4("Label", values, "%.1f", ImGuiInputTextFlags.None)\r\n\r\n  -- ImGui.InputInt(...)\r\n  -- Parameters: text (label), int (value), int (step) [O], int (step_fast) [O], ImGuiInputTextFlags (flags) [O]\r\n  -- Returns: int (value), bool (used)\r\n  -- Overloads\r\n  value, used = ImGui.InputInt("Label", value)\r\n  value, used = ImGui.InputInt("Label", value, 1)\r\n  value, used = ImGui.InputInt("Label", value, 1, 10)\r\n  value, used = ImGui.InputInt("Label", value, 1, 10, ImGuiInputTextFlags.None)\r\n\r\n  -- ImGui.InputInt2(...)\r\n  -- Parameters: text (label), table (values), ImGuiInputTextFlags (flags) [O]\r\n  -- Returns: table (values), bool (used)\r\n  -- Overloads\r\n  values, used = ImGui.InputInt2("Label", values)\r\n  values, used = ImGui.InputInt2("Label", values, ImGuiInputTextFlags.None)\r\n\r\n  -- ImGui.InputInt3(...)\r\n  -- Parameters: text (label), table (values), ImGuiInputTextFlags (flags) [O]\r\n  -- Returns: table (values), bool (used)\r\n  -- Overloads\r\n  values, used = ImGui.InputInt3("Label", values)\r\n  values, used = ImGui.InputInt3("Label", values, ImGuiInputTextFlags.None)\r\n\r\n  -- ImGui.InputInt4(...)\r\n  -- Parameters: text (label), table (values), ImGuiInputTextFlags (flags) [O]\r\n  -- Returns: table (values), bool (used)\r\n  -- Overloads\r\n  values, used = ImGui.InputInt4("Label", values)\r\n  values, used = ImGui.InputInt4("Label", values, ImGuiInputTextFlags.None)\r\n\r\n  -- ImGui.InputDouble(...)\r\n  -- Parameters: text (label), double (value), double (step) [O], double (step_fast) [O], text (format) [O], ImGuiInputTextFlags (flags) [O]\r\n  -- Returns: double (value), bool (used)\r\n  -- Overloads\r\n  value, used = ImGui.InputDouble("Label", value)\r\n  value, used = ImGui.InputDouble("Label", value, 1)\r\n  value, used = ImGui.InputDouble("Label", value, 1, 10)\r\n  value, used = ImGui.InputDouble("Label", value, 1, 10, "%.4f")\r\n  value, used = ImGui.InputDouble("Label", value, 1, 10, "%.4f", ImGuiInputTextFlags.None)\n'})}),"\n",(0,t.jsx)(r.h2,{id:"widgets-color-editor--picker",children:"Widgets: Color Editor / Picker"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'  -- ImGui.ColorEdit3(...)\r\n  -- Parameters: text (label), table (col), ImGuiColorEditFlags (flags) [O]\r\n  -- Returns: table (col), bool (used)\r\n  -- Overloads\r\n  col, used = ImGui.ColorEdit3("Label", col)\r\n  col, used = ImGui.ColorEdit3("Label", col, ImGuiColorEditFlags.NoTooltip)\r\n\r\n  -- ImGui.ColorEdit4(...)\r\n  -- Parameters: text (label), table (col), ImGuiColorEditFlags (flags) [O]\r\n  -- Returns: table (col), bool (used)\r\n  -- Overloads\r\n  col, used = ImGui.ColorEdit4("Label", col)\r\n  col, used = ImGui.ColorEdit4("Label", col, ImGuiColorEditFlags.NoTooltip)\r\n\r\n  -- ImGui.ColorPicker3(...)\r\n  -- Parameters: text (label), table (col), ImGuiColorEditFlags (flags) [O]\r\n  -- Returns: table (col), bool (used)\r\n  -- Overloads\r\n  col, used = ImGui.ColorPicker3("Label", col)\r\n  col, used = ImGui.ColorPicker3("Label", col, ImGuiColorEditFlags.NoTooltip)\r\n\r\n  -- ImGui.ColorPicker4(...)\r\n  -- Parameters: text (label), table (col), ImGuiColorEditFlags (flags) [O]\r\n  -- Returns: table (col), bool (used)\r\n  -- Overloads\r\n  col, used = ImGui.ColorPicker4("Label", col)\r\n  col, used = ImGui.ColorPicker4("Label", col, ImGuiColorEditFlags.NoTooltip)\r\n\r\n  -- ImGui.ColorButton(...)\r\n  -- Parameters: text (desc_id), table (col), ImGuiColorEditFlags (flags) [O], float (size_x) [O], float (size_y) [O]\r\n  -- Returns: bool (pressed)\r\n  -- Overloads\r\n  pressed = ImGui.ColorButton("Desc ID", { 1, 0, 0, 1 })\r\n  pressed = ImGui.ColorButton("Desc ID", { 1, 0, 0, 1 }, ImGuiColorEditFlags.None)\r\n  pressed = ImGui.ColorButton("Desc ID", { 1, 0, 0, 1 }, ImGuiColorEditFlags.None, 100, 100)\r\n\r\n  -- ImGui.SetColorEditOptions(...)\r\n  -- Parameters: ImGuiColorEditFlags (flags)\r\n  ImGui.SetColorEditOptions(ImGuiColorEditFlags.NoTooltip | ImGuiColorEditFlags.NoInputs)\n'})}),"\n",(0,t.jsx)(r.h2,{id:"widgets-trees",children:"Widgets: Trees"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'  -- ImGui.TreeNode(...)\r\n  -- Parameters: text (label), text (fmt) [O]\r\n  -- Returns: bool (open)\r\n  -- Overloads\r\n  open = ImGui.TreeNode("Label")\r\n  open = ImGui.TreeNode("Label", "Some Text")\r\n\r\n  -- ImGui.TreeNodeEx(...)\r\n  -- Parameters: text (label), ImGuiTreeNodeFlags (flags) [O], text (fmt) [O]\r\n  -- Returns: bool (open)\r\n  -- Overloads\r\n  open = ImGui.TreeNodeEx("Label")\r\n  open = ImGui.TreeNodeEx("Label", ImGuiTreeNodeFlags.Selected)\r\n  open = ImGui.TreeNodeEx("Label", ImGuiTreeNodeFlags.Selected, "Some Text")\r\n\r\n  -- ImGui.TreePush(...)\r\n  -- Parameters: text (str_id)\r\n  ImGui.TreePush("String ID")\r\n\r\n  -- ImGui.TreePop()\r\n  ImGui.TreePop()\r\n\r\n  -- ImGui.GetTreeNodeToLabelSpacing()\r\n  -- Returns: float (spacing)\r\n  spacing = ImGui.GetTreeNodeToLabelSpacing()\r\n\r\n  -- ImGui.CollapsingHeader(...)\r\n  -- Parameters A: text (label), ImGuiTreeNodeFlags (flags) [O]\r\n  -- Parameters B: text (label), bool (open), ImGuiTreeNodeFlags (flags) [O]\r\n  -- Returns A: bool (notCollapsed)\r\n  -- Returns B: bool (open), bool (notCollapsed)\r\n  -- Overloads\r\n  notCollapsed = ImGui.CollapsingHeader("Label")\r\n  notCollapsed = ImGui.CollapsingHeader("Label", ImGuiTreeNodeFlags.Selected)\r\n  open, notCollapsed = ImGui.CollapsingHeader("Label", open)\r\n  open, notCollapsed = ImGui.CollapsingHeader("Label", open, ImGuiTreeNodeFlags.Selected)\r\n\r\n  -- ImGui.SetNextItemOpen(...)\r\n  -- Parameters: bool (open), ImGuiCond (cond) [O]\r\n  -- Overloads\r\n  ImGui.SetNextItemOpen(true)\r\n  ImGui.SetNextItemOpen(true, ImGuiCond.Always)\n'})}),"\n",(0,t.jsx)(r.h2,{id:"widgets-selectables",children:"Widgets: Selectables"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'  -- ImGui.Selectable(...)\r\n  -- Parameters: text (label), bool (selected) [O], ImGuiSelectableFlags (flags) [O], float (size_x) [O], float (size_y) [O]\r\n  -- Returns: bool (selected)\r\n  -- Overloads\r\n  selected = ImGui.Selectable("Label")\r\n  selected = ImGui.Selectable("Label", selected)\r\n  selected = ImGui.Selectable("Label", selected, ImGuiSelectableFlags.AllowDoubleClick)\r\n  selected = ImGui.Selectable("Label", selected, ImGuiSelectableFlags.AllowDoubleClick, 100, 100)\n'})}),"\n",(0,t.jsx)(r.h2,{id:"widgets-list-boxes",children:"Widgets: List Boxes"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'  -- ImGui.ListBox(...)\r\n  -- Parameters: text (label), int (current_item), table (items), int (items_count), int (height_in_items) [O]\r\n  -- Returns: int (current_item), bool (clicked)\r\n  -- Overloads\r\n  current_item, clicked = ImGui.ListBox("Label", current_item, { "Item 1", "Item 2", 2 })\r\n  current_item, clicked = ImGui.ListBox("Label", current_item, { "Item 1", "Item 2", 2 }, 5)\r\n\r\n  -- ImGui.BeginListBox(...)\r\n  -- Parameters A: text (label), float (size_x) [O], float (size_y) [O]\r\n  -- Returns: bool (open)\r\n  -- Overloads\r\n  open = ImGui.BeginListBox("Label")\r\n  open = ImGui.BeginListBox("Label", 100.0, 100.0)\r\n\r\n  -- ImGui.EndListBox()\r\n  ImGui.EndListBox()\n'})}),"\n",(0,t.jsx)(r.h2,{id:"widgets-value-helpers",children:"Widgets: Value() Helpers"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'  -- ImGui.Value(...)\r\n  -- Parameters: text (prefix) bool/int/unsigned int/float (value), text (float_format) [O] -- format only available with float\r\n  -- Overloads\r\n  ImGui.Value("Prefix", true)\r\n  ImGui.Value("Prefix", -5)\r\n  ImGui.Value("Prefix", 5)\r\n  ImGui.Value("Prefix", 5.0)\r\n  ImGui.Value("Prefix", 5.0, "%.2f")\n'})}),"\n",(0,t.jsx)(r.h2,{id:"widgets-menus",children:"Widgets: Menus"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'-- ImGui.BeginMenuBar()\r\n-- Returns: bool (shouldDraw)\r\nshouldDraw = ImGui.BeginMenuBar()\r\n\r\n-- ImGui.EndMenuBar()\r\nImGui.EndMenuBar()\r\n\r\n-- ImGui.BeginMainMenuBar()\r\n-- Returns: bool (shouldDraw)\r\nshouldDraw = ImGui.BeginMainMenuBar()\r\n\r\n-- ImGui.EndMainMenuBar()\r\nImGui.EndMainMenuBar()\r\n\r\n-- ImGui.BeginMenu(...)\r\n-- Parameters: text (label), bool (enabled) [O]\r\n-- Returns: bool (shouldDraw)\r\n-- Overloads\r\nshouldDraw = ImGui.BeginMenu("Label")\r\nshouldDraw = ImGui.BeginMenu("Label", true)\r\n\r\n-- ImGui.EndMenu()\r\nImGui.EndMenu()\r\n\r\n-- ImGui.MenuItem(...)\r\n-- Parameters A: text (label), text (shortcut) [0]\r\n-- Parameters B: text (label), text (shortcut), bool (selected)\r\n-- Returns A: bool (activated)\r\n-- returns B: bool (selected), bool (activated)\r\n-- Overloads\r\nactivated = ImGui.MenuItem("Label")\r\nactivated = ImGui.MenuItem("Label", "ALT+F4")\r\nselected, activated = ImGui.MenuItem("Label", "ALT+F4", selected)\r\nselected, activated = ImGui.MenuItem("Label", "ALT+F4", selected, true)\n'})}),"\n",(0,t.jsx)(r.h2,{id:"tooltips",children:"Tooltips"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'  -- ImGui.BeginTooltip()\r\n  ImGui.BeginTooltip()\r\n\r\n  -- ImGui.EndTooltip()\r\n  ImGui.EndTooltip()\r\n\r\n  -- ImGui.SetTooltip(...)\r\n  -- Parameters: text (fmt)\r\n  ImGui.SetTooltip("Did you know that I have the high ground?")\n'})}),"\n",(0,t.jsx)(r.h2,{id:"popups-modals",children:"Popups, Modals"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'  -- ImGui.BeginPopup(...)\r\n  -- Parameters: text (str_id), ImGuiWindowFlags (flags) [O]\r\n  -- Returns: bool (open)\r\n  -- Overloads\r\n  open = ImGui.BeginPopup("String ID")\r\n  open = ImGui.BeginPopup("String ID", ImGuiWindowFlags.NoCollapse)\r\n\r\n  -- ImGui.BeginPopupModal(...)\r\n  -- Parameters: text (name), bool (open) [O], ImGuiWindowFlags (flags) [O]\r\n  -- Returns: bool (open)\r\n  -- Overloads\r\n  open = ImGui.BeginPopupModal("Name")\r\n  open = ImGui.BeginPopupModal("Name", ImGuiWindowFlags.NoCollapse)\r\n  open = ImGui.BeginPopupModal("Name", open)\r\n  open = ImGui.BeginPopupModal("Name", open, ImGuiWindowFlags.NoCollapse)\r\n\r\n  -- ImGui.EndPopup()\r\n  ImGui.EndPopup()\r\n\r\n  -- ImGui.OpenPopup(...)\r\n  -- Parameters: text (str_id), ImGuiPopupFlags (popup_flags)\r\n  -- Overloads\r\n  ImGui.OpenPopup("String ID")\r\n  ImGui.OpenPopup("String ID", ImGuiPopupFlags.NoOpenOverExistingPopup)\r\n\r\n  -- ImGui.OpenPopupContextItem(...)\r\n  -- Parameters: text (str_id), ImGuiPopupFlags (popup_flags)\r\n  -- Returns: bool (open)\r\n  -- Overloads\r\n  open = ImGui.OpenPopupContextItem()\r\n  open = ImGui.OpenPopupContextItem("String ID")\r\n  open = ImGui.OpenPopupContextItem("String ID", ImGuiPopupFlags.NoOpenOverExistingPopup)\r\n\r\n  -- ImGui.CloseCurrentPopup()\r\n  ImGui.CloseCurrentPopup()\r\n\r\n  -- ImGui.BeginPopupContextItem(...)\r\n  -- Parameters: text (str_id), ImGuiPopupFlags (popup_flags)\r\n  -- Returns: bool (open)\r\n  -- Overloads\r\n  open = ImGui.BeginPopupContextItem()\r\n  open = ImGui.BeginPopupContextItem("String ID")\r\n  open = ImGui.BeginPopupContextItem("String ID", ImGuiPopupFlags.NoOpenOverExistingPopup)\r\n\r\n  -- ImGui.BeginPopupContextWindow(...)\r\n  -- Parameters: text (str_id), ImGuiPopupFlags (popup_flags)\r\n  -- Returns: bool (open)\r\n  -- Overloads\r\n  open = ImGui.BeginPopupContextWindow()\r\n  open = ImGui.BeginPopupContextWindow("String ID")\r\n  open = ImGui.BeginPopupContextWindow("String ID", ImGuiPopupFlags.NoOpenOverExistingPopup)\r\n\r\n  -- ImGui.BeginPopupContextVoid(...)\r\n  -- Parameters: text (str_id), ImGuiPopupFlags (popup_flags)\r\n  -- Returns: bool (open)\r\n  -- Overloads\r\n  open = ImGui.BeginPopupContextVoid()\r\n  open = ImGui.BeginPopupContextVoid("String ID")\r\n  open = ImGui.BeginPopupContextVoid("String ID", ImGuiPopupFlags.NoOpenOverExistingPopup)\r\n\r\n  -- ImGui.IsPopupOpen(...)\r\n  -- Parameters: text (str_id), ImGuiPopupFlags (popup_flags)\r\n  -- Overloads\r\n  ImGui.IsPopupOpen("String ID")\r\n  ImGui.IsPopupOpen("String ID", ImGuiPopupFlags.NoOpenOverExistingPopup)\n'})}),"\n",(0,t.jsx)(r.h2,{id:"tables",children:"Tables"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'  -- ImGui.BeginTable(...)\r\n  -- Parameters: string (str_id), int (column), ImGuiTableFlags (flags) [O], float (outer_size_x) [O], float (outer_size_y) [O], float (inner_width) [O]\r\n  -- Returns: bool\r\n  ImGui.BeginTable("Table1", 3)\r\n  ImGui.BeginTable("Table1", 3, ImGuiTableFlags.Resizable)\r\n  ImGui.BeginTable("Table1", 3, ImGuiTableFlags.Resizable, 200, 150)\r\n  ImGui.BeginTable("Table1", 3, ImGuiTableFlags.Resizable, 200, 150, 10)\r\n\r\n  -- ImGui.EndTable() // only call EndTable() if BeginTable() returns true!\r\n  ImGui.EndTable()\r\n\r\n  -- ImGui.TableNextRow(...) // append into the first cell of a new row.\r\n  -- Parameters: ImGuiTableRowFlags (flags) [O], float (min_row_height) [O]\r\n  ImGui.TableNextRow()\r\n  ImGui.TableNextRow(ImGuiTableRowFlags.Headers)\r\n  ImGui.TableNextRow(ImGuiTableRowFlags.Headers, 25)\r\n\r\n  -- ImGui.TableNextColumn() // append into the next column (or first column of next row if currently in last column). Return true when column is visible.\r\n  -- Returns: bool (visible)\r\n  visible = ImGui.TableNextColumn()\r\n\r\n  -- ImGui.TableSetColumnIndex(...) // append into the specified column. Return true when column is visible.\r\n  -- Parameter: int (column_n)\r\n  -- Returns: bool (visible)\r\n  visible = ImGui.TableSetColumnIndex(2)\r\n\r\n  -- ImGui.TableSetupColumn(...)\r\n  -- Parameters: string (label), ImGuiTableColumnFlags (flags) [O], float (init_width_or_weight) [O], ImU32 (user_id) [O]\r\n  ImGui.TableSetupColumn("Column1")\r\n  ImGui.TableSetupColumn("Column1", ImGuiTableColumnFlags.WidthFixed)\r\n  ImGui.TableSetupColumn("Column1", ImGuiTableColumnFlags.WidthFixed, 60)\r\n\r\n  -- ImGui.TableSetupScrollFreeze(...) // lock columns/rows so they stay visible when scrolled.\r\n  -- Parameters: int (cols), int(rows)\r\n  ImGui.TableSetupScrollFreeze(3, 1)\r\n\r\n  -- ImGuui.TableHeadersRow() // submit all headers cells based on data provided to TableSetupColumn() + submit context menu\r\n  ImGui.TableHeadersRow()\r\n\r\n  -- ImGui.TableHeader(...) // submit one header cell manually (rarely used)\r\n  -- Parameter: string (label)\r\n  ImGui.TableHeader("Header")\r\n\r\n  -- ImGui.TableGetSortSpecs() // get latest sort specs for the table (NULL if not sorting).\r\n  -- Returns: ImGuiTableSortSpecs*\r\n  ImGui.TableGetSortSpecs()\r\n\r\n  -- ImGui.TableGetColumnCount() // return number of columns (value passed to BeginTable)\r\n  -- Returns: int (cols)\r\n  cols = ImGui.TableGetColumnCount()\r\n\r\n  -- ImGui.TableGetColumnIndex() // return current column index.\r\n  -- Returns: int (col_index)\r\n  col_index = ImGui.TableGetColumnIndex()\r\n\r\n  -- ImGui.TableGetRowIndex() // return current row index.\r\n  -- Returns: int (row_index)\r\n  row_index = ImGui.TableGetRowIndex()\r\n\r\n  -- ImGui.TableGetColumnName(...) // return "" if column didn\'t have a name declared by TableSetupColumn(). Pass -1 to use current column.\r\n  -- Parameter: int (column_n) [O]\r\n  -- Returns: string(col_name)\r\n  col_name = ImGui.TableGetColumnName()\r\n  col_name = ImGui.TableGetColumnName(2)\r\n\r\n  -- ImGui.TableGetColumnFlags(...) // return column flags so you can query their Enabled/Visible/Sorted/Hovered status flags. Pass -1 to use current column.\r\n  -- Parameter: int (column_n) [O]\r\n  -- Returns: ImGuiTableColumnFlags\r\n  col_flags = ImGui.TableGetColumnFlags()\r\n  col_flags = ImGui.TableGetColumnFlags(2)\r\n\r\n  -- ImGui.TableSetBgColor(ImGuiTableBgTarget target, ImU32 color, int column_n = -1) // change the color of a cell, row, or column. See ImGuiTableBgTarget_ flags for details.\r\n  -- Parameters1: ImGuiTableBgTarget (target), ImU32 (color), int (column_n) [O]\r\n  -- Parameters2: ImGuiTableBgTarget (target), float (col_R), float (col_G), float (col_B), float (col_A), int (column_n) [O]\r\n  ImGui.TableSetBgColor(ImGuiTableBgTarget.CellBg, 0xF42069FF)\r\n  ImGui.TableSetBgColor(ImGuiTableBgTarget.CellBg, 0xF42069FF, 2)\r\n  ImGui.TableSetBgColor(ImGuiTableBgTarget.CellBg, 1, 0, 0, 1)\r\n  ImGui.TableSetBgColor(ImGuiTableBgTarget.CellBg, 1, 0, 0, 1, 2)\n'})}),"\n",(0,t.jsx)(r.h2,{id:"columns-legacy-api-prefer-using-tables",children:"Columns (Legacy API, prefer using Tables!)"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'  -- ImGui.Columns(...)\r\n  -- Parameters: int (count) [O], text (id) [O], bool (border) [O]\r\n  -- Overloads\r\n  ImGui.Columns()\r\n  ImGui.Columns(2)\r\n  ImGui.Columns(2, "MyOtherColumn")\r\n  ImGui.Columns(3, "MyColumnWithBorder", true)\r\n\r\n  -- ImGui.NextColumn()\r\n  ImGui.NextColumn()\r\n\r\n  -- ImGui.GetColumnIndex()\r\n  -- Returns: int (index)\r\n  index = ImGui.GetColumnIndex()\r\n\r\n  -- ImGui.GetColumnWidth(...)\r\n  -- Parameters: int (column_index) [O]\r\n  -- Returns: float (width)\r\n  -- Overloads\r\n  width = ImGui.GetColumnWidth()\r\n  width = ImGui.getColumnWidth(2)\r\n\r\n  -- ImGui.SetColumnWidth(...)\r\n  -- Parameters: int (column_index), float (width)\r\n  ImGui.SetColumnWidth(2, 100)\r\n\r\n  -- ImGui.GetColumnOffset(...)\r\n  -- Parameters: int (column_index) [O]\r\n  -- Returns: float (offset)\r\n  -- Overloads\r\n  offset = ImGui.GetColumnOffset()\r\n  offset = ImGui.GetColumnOffset(2)\r\n\r\n  -- ImGui.SetColumnOffset(...)\r\n  -- Parameters: int (column_index), float (offset)\r\n  ImGui.SetColumnOffset(2, 10)\r\n\r\n  -- ImGui.GetColumnsCount()\r\n  -- Returns: int (count)\r\n  count = ImGui.GetColumnsCount()\n'})}),"\n",(0,t.jsx)(r.h2,{id:"tab-bars-tabs",children:"Tab Bars, Tabs"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'  -- ImGui.BeginTabBar(...)\r\n  -- Parameters: text (str_id), ImGuiTabBarFlags (flags)\r\n  -- Returns: bool (open)\r\n  -- Overloads\r\n  open = ImGui.BeginTabBar("String ID")\r\n  open = ImGui.BeginTabBar("String ID", ImGuiTabBarFlags.Reorderable)\r\n\r\n  -- ImGui.EndTabBar()\r\n  ImGui.EndTabBar()\r\n\r\n  -- ImGui.BeginTabItem()\r\n  -- Parameters A: text (label)\r\n  -- Parameters B: text (label), bool (open), ImGuiTabItemFlags (flags) [O]\r\n  -- Returns A: bool (selected)\r\n  -- Returns B: bool (open), bool (selected)\r\n  -- Overloads\r\n  selected = ImGui.BeginTabItem("Label")\r\n  selected = ImGui.BeginTabItem("Label", ImGuiTabItemFlags.NoTooltip)\r\n  open, selected = ImGui.BeginTabItem("Label", open)\r\n  open, selected = ImGui.BeginTabItem("Label", open, ImGuiTabItemFlags.NoTooltip)\r\n\r\n  -- ImGui.EndTabItem()\r\n  ImGui.EndTabItem()\r\n\r\n  -- ImGui.SetTabItemClosed(...)\r\n  -- Parameters: text (tab_or_docked_window_label)\r\n  ImGui.SetTabItemClosed("MyDockedWindow")\n'})}),"\n",(0,t.jsx)(r.h2,{id:"disabling",children:"Disabling"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:"  -- ImGui.BeginDisabled()\r\n  -- ImGui.BeginDisabled(disabled) -- bool: disabled\r\n  -- ImGui.EndDisabled()\r\n  ImGui.BeginDisabled()\r\n  ImGui.BeginDisabled(false)\r\n  ImGui.EndDisabled()\n"})}),"\n",(0,t.jsx)(r.h2,{id:"clipping",children:"Clipping"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:"  -- ImGui.PushClipRect(...)\r\n  -- Parameters: float (min_x), float (min_y), float (max_x), float (max_y), bool (intersect_current)\r\n  ImGui.PushClipRect(0, 0, 100, 100, false)\r\n\r\n  -- ImGui.PopClipRect()\r\n  ImGui.PopClipRect()\n"})}),"\n",(0,t.jsx)(r.h2,{id:"focus-activation",children:"Focus, Activation"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:"  -- ImGui.SetItemDefaultFocus()\r\n  ImGui.SetItemDefaultFocus()\r\n\r\n  -- ImGui.SetKeyboardFocusHere(...)\r\n  -- Parameters: int (offset) [O]\r\n  -- Overloads\r\n  ImGui.SetItemDefaultFocus()\r\n  ImGui.SetItemDefaultFocus(5)\n"})}),"\n",(0,t.jsx)(r.h2,{id:"item--widgets-utilities",children:"Item / Widgets Utilities"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:"  -- ImGui.IsItemHovered(...)\r\n  -- Parameters: ImGuiHoveredFlags (flags) [O]\r\n  -- Returns: bool (hovered)\r\n  -- Overloads\r\n  hovered = ImGui.IsItemHovered()\r\n  hovered = ImGui.IsItemHovered(ImGuiHoveredFlags.ChildWindows)\r\n\r\n  -- ImGui.IsItemActive()\r\n  -- Returns: bool (active)\r\n  active = ImGui.IsItemActive()\r\n\r\n  -- ImGui.IsItemFocused()\r\n  -- Returns: bool (focused)\r\n  focused = ImGui.IsItemFocused()\r\n\r\n  -- ImGui.IsItemClicked(...)\r\n  -- Parameters: ImGuiMouseButton (mouse_button) [O]\r\n  -- Returns: bool (clicked)\r\n  -- Overloads\r\n  clicked = ImGui.IsItemClicked()\r\n  clicked = ImGui.IsItemClicked(ImGuiMouseButton.Middle)\r\n\r\n  -- ImGui.IsItemVisible()\r\n  -- Returns: bool (visible)\r\n  visible = ImGui.IsItemVisible()\r\n\r\n  -- ImGui.IsItemEdited()\r\n  -- Returns: bool (edited)\r\n  edited = ImGui.IsItemEdited()\r\n\r\n  -- ImGui.IsItemActivated()\r\n  -- Returns: bool (activated)\r\n  activated = ImGui.IsItemActivated()\r\n\r\n  -- ImGui.IsItemDeactivated()\r\n  -- Returns: bool (deactivated)\r\n  deactivated = ImGui.IsItemDeactivated()\r\n\r\n  -- ImGui.IsItemDeactivatedAfterEdit()\r\n  -- Returns: bool (deactivated_after_edit)\r\n  deactivated_after_edit = ImGui.IsItemDeactivatedAfterEdit()\r\n\r\n  -- ImGui.IsItemToggledOpen()\r\n  -- Returns: bool (toggled_open)\r\n  toggled_open = ImGui.IsItemToggledOpen()\r\n\r\n  -- ImGui.IsAnyItemHovered()\r\n  -- Returns: bool (any_item_hovered)\r\n  any_item_hovered = ImGui.IsAnyItemHovered()\r\n\r\n   -- ImGui.IsAnyItemActive()\r\n  -- Returns: bool (any_item_active)\r\n  any_item_active = ImGui.IsAnyItemActive()\r\n\r\n  -- ImGui.IsAnyItemFocused()\r\n  -- Returns: bool (any_item_focused)\r\n  any_item_focused = ImGui.IsAnyItemFocused()\r\n\r\n  -- ImGui.GetItemRectMin()\r\n  -- Returns: float (x), float (y)\r\n  x, y = ImGui.GetItemRectMin()\r\n\r\n  -- ImGui.GetItemRectMax()\r\n  -- Returns: float (x), float (y)\r\n  x, y = ImGui.GetItemRectMax()\r\n\r\n  -- ImGui.GetItemRectSize()\r\n  -- Returns: float (x), float (y)\r\n  x, y = ImGui.GetItemRectSize()\r\n\r\n  -- ImGui.SetItemAllowOverlap()\r\n  ImGui.SetItemAllowOverlap()\n"})}),"\n",(0,t.jsx)(r.h2,{id:"miscellaneous-utilities",children:"Miscellaneous Utilities"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:"  -- ImGui.IsRectVisible(...)\r\n  -- Parameters A: float (size_x), float (size_y)\r\n  -- Parameters B: float(min_x), float (min_y), float (max_x), float (max_y)\r\n  -- Returns: bool (visible)\r\n  -- Overloads\r\n  visible = ImGui.IsRectVisible(100, 100)\r\n  visible = ImGui.IsRectVisible(50, 50, 200, 200)\r\n\r\n  -- ImGui.GetTime()\r\n  -- Returns double (time)\r\n  time = ImGui.GetTime()\r\n\r\n  -- ImGui.GetFrameCount()\r\n  -- Returns int (frame_count)\r\n  frame_count = ImGui.GetFrameCount()\r\n\r\n  -- ImGui.GetStyleColorName(...)\r\n  -- Parameters: ImGuiCol (idx)\r\n  -- Returns: text (style_color_name)\r\n  style_color_name = ImGui.GetStyleColorName(ImGuiCol.Text)\r\n\r\n  -- ImGui.BeginChildFrame(...)\r\n  -- Parameters: unsigned int (id), float (size_x), float (size_y), ImGuiWindowFlags (flags) [O]\r\n  -- Returns: bool (open)\r\n  -- Overloads\r\n  open = ImGui.BeginChildFrame(0, 100, 100)\r\n  open = ImGui.BeginChildFrame(0, 100, 100, ImGuiWindowFlags.NoBackground)\r\n\r\n  -- ImGui.EndChildFrame()\r\n  ImGui.EndChildFrame()\n"})}),"\n",(0,t.jsx)(r.h2,{id:"text-utilities",children:"Text Utilities"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'  -- ImGui.CalcTextSize(...)\r\n  -- Parameters: text (text), bool (hide_text_after_double_hash) [O], float (wrap_width) [O]\r\n  -- Returns: float (x), float (y)\r\n  -- Overloads\r\n  x, y = ImGui.CalcTextSize("Calculate me")\r\n  x, y = ImGui.CalcTextSize("Calculate me", true)\r\n  x, y = ImGui.CalcTextSize("Calculate me", true, 100)\n'})}),"\n",(0,t.jsx)(r.h2,{id:"color-utilities",children:"Color Utilities"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:"  -- ImGui.ColorConvertRGBtoHSV(...)\r\n  -- Parameters: float (r), float (g), float (b)\r\n  -- Returns: float (h), float (s), float (v)\r\n  h, s, v = ImGui.ColorConvertRGBtoHSV(1, 0, 0.5)\r\n\r\n  -- ImGui.ColorConvertHSVtoRGB(...)\r\n  -- Parameters: float (h), float (s), float (v)\r\n  -- Returns: float (r), float (g), float (b)\r\n  r, g, b = ImGui.ColorConvertHSVtoRGB(1, 0, 0.5)\r\n\r\n  -- ImGui.ColorConvertU32ToFloat4(...)\r\n  -- Parameters: int (color_u32)\r\n  -- Returns: float array (color_f4={r,g,b,a})\r\n  color_f4 = ImGui.ColorConvertU32ToFloat4(0xF69420FF)\r\n\r\n  -- ImGui.ColorConvertFloat4ToU32(...)\r\n  -- Parameters: float array (color_f4={r,g,b,a})\r\n  -- Returns: int (color_u32)\r\n  -- NOTE: this function is fundamentally\r\n  color_u32 = ImGui.ColorConvertFloat4ToU32({0.4, 0.2, 0, 1})\n"})}),"\n",(0,t.jsx)(r.h2,{id:"inputs-utilities-mouse",children:"Inputs Utilities: Mouse"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:"  -- ImGui.IsMouseClicked(...)\r\n  -- Parameters: ImGuiMouseButton (button), bool (repeat)\r\n  -- Returns: bool (clicked)\r\n  clicked = ImGui.IsMouseClicked(ImGuiMouseButton.Middle)\r\n  clicked = ImGui.IsMouseClicked(ImGuiMouseButton.Middle, true)\r\n\r\n  -- ImGui.IsMouseDoubleClicked(...)\r\n  -- Parameters: ImGuiMouseButton (button)\r\n  -- Returns: bool (clicked)\r\n  clicked = ImGui.IsMouseDoubleClicked(ImGuiMouseButton.Middle)\r\n\r\n  -- ImGui.IsMouseHoveringRect(...)\r\n  -- Parameters: float (min_x), float (min_y), float(max_x), float(max_y), bool (clip) [O]\r\n  -- Returns: bool (hovered)\r\n  hovered = ImGui.IsMouseHoveringRect(0, 0, 100, 100)\r\n  hovered = ImGui.IsMouseHoveringRect(0, 0, 100, 100, true)\r\n\r\n  -- ImGui.GetMousePos()\r\n  -- Returns: float (x), float (y)\r\n  x, y = ImGui.GetMousePos()\r\n\r\n  -- ImGui.GetMousePosOnOpeningCurrentPopup()\r\n  -- Returns: float (x), float (y)\r\n  x, y = ImGui.GetMousePosOnOpeningCurrentPopup()\r\n\r\n  -- ImGui.IsMouseDragging(...)\r\n  -- Parameters: ImGuiMouseButton (button), float (lock_threshold) [O]\r\n  -- Returns: bool (dragging)\r\n  -- Overloads\r\n  dragging = ImGui.IsMouseDragging(ImGuiMouseButton.Middle)\r\n  dragging = ImGui.IsMouseDragging(ImGuiMouseButton.Middle, 0.5)\r\n\r\n  -- ImGui.GetMouseDragDelta(...)\r\n  -- Parameters: ImGuiMouseButton (button) [O], float (lock_threshold) [O]\r\n  -- Returns: float (x), float (y)\r\n  -- Overloads\r\n  x, y = ImGui.GetMouseDragDelta()\r\n  x, y = ImGui.GetMouseDragDelta(ImGuiMouseButton.Middle)\r\n  x, y = ImGui.GetMouseDragDelta(ImGuiMouseButton.Middle, 0.5)\r\n\r\n  -- ImGui.ResetMouseDragDelta(...)\r\n  -- Parameters: ImGuiMouseButton (button) [O]\r\n  -- Overloads\r\n  ImGui.ResetMouseDragDelta()\r\n  ImGui.ResetMouseDragDelta(ImGuiMouseButton.Middle)\n"})}),"\n",(0,t.jsx)(r.h2,{id:"inputs-utilities-keyboard",children:"Inputs Utilities: Keyboard"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'  -- ImGuiKey\r\n  -- ImGuiKey.None\r\n  -- ImGuiKey.Tab\r\n  -- ImGuiKey.LeftArrow\r\n  -- ImGuiKey.RightArrow\r\n  -- You get the idea, just check the source\r\n\r\n  -- ImGuiKeyMod\r\n  -- ImGuiKeyMod.None\r\n  -- ImGuiKeyMod.Ctrl\r\n  -- ImGuiKeyMod.Shift\r\n  -- ImGuiKeyMod.Alt\r\n  -- ImGuiKeyMod.Super\r\n  -- ImGuiKeyMod.Shortcut\r\n  -- ImGuiKeyMod.Mask_\r\n\r\n  -- Classic way of checking for a key press combination\r\n  -- Use IsKeyDown for KeyMods, works better.\r\n  if ImGui.IsKeyDown(ImGuiKeyMod.Shift) and ImGui.IsKeyPressed(ImGuiKey.A) then\r\n      print("yes")\r\n  end\r\n\r\n  -- ImGui.IsKeyDown(...)\r\n  -- Parameters: ImGuiKey or ImGuiKeyMod\r\n  -- Returns: bool\r\n  bool = ImGui.IsKeyDown(key)\r\n\r\n  -- ImGui.IsKeyPressed(...)\r\n  -- Parameters: ImGuiKey or ImGuiKeyMod, bool repeat = true\r\n  -- Returns: bool\r\n  bool = ImGui.IsKeyPressed(key)\r\n  bool = ImGui.IsKeyPressed(key, repeat)\r\n\r\n  -- ImGui.IsKeyReleased(...)\r\n  -- Parameters: ImGuiKey or ImGuiKeyMod\r\n  -- Returns: bool\r\n  bool = ImGui.IsKeyReleased(key)\r\n\r\n  -- ImGui.Hotkey(...)\r\n  -- Parameters: label (string), current_hotkey (integer number), size (ImVec2 OPTIONAL)\r\n  -- Returns: bool and integer number\r\n  value_changed, vk_key_number = ImGui.Hotkey(label, VK_KEY)\r\n\r\n  -- ImGui.GetKeyPressedAmount(...)\r\n  -- Parameters: ImGuiKey/ImGuiKeyMod key, float repeat_delay, float repeat_rate\r\n  -- Returns: int\r\n  int = ImGui.GetKeyPressedAmount(key)\r\n\r\n  -- ImGui.GetKeyName(...)\r\n  -- Parameters: ImGuiKey/ImGuiKeyMod key\r\n  -- Returns: string\r\n  name = ImGui.GetKeyName(key)\r\n\r\n  -- ImGui.SetNextFrameWantCaptureKeyboard(...)\r\n  -- Parameters: bool want_to_capture_keyboard\r\n  -- Returns: \r\n  ImGui.SetNextFrameWantCaptureKeyboard(want_to_capture_keyboard)\r\n\r\n  -- ImGui.PushAllowKeyboardFocus(...)\r\n  -- Parameters: bool tab_stop\r\n  -- Returns: \r\n  ImGui.PushAllowKeyboardFocus(tab_stop)\r\n\r\n  -- ImGui.PopAllowKeyboardFocus(...)\r\n  -- Parameters: \r\n  -- Returns: \r\n  ImGui.PopAllowKeyboardFocus()\r\n\r\n  -- ImGui.SetKeyboardFocusHere(...)\r\n  -- Parameters: int offset\r\n  -- Returns: \r\n  ImGui.PopAllowKeyboardFocus()\r\n  ImGui.PopAllowKeyboardFocus(offset)\n'})}),"\n",(0,t.jsx)(r.h2,{id:"clipboard-utilities",children:"Clipboard Utilities"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'  -- ImGui.GetClipboardText()\r\n  -- Returns: text (text)\r\n  text = ImGui.GetClipboardText()\r\n\r\n  -- ImGui.SetClipboardText(...)\r\n  -- Parameters: text (text)\r\n  ImGui.SetClipboardText("I made it to the clipboard!")\n'})})]})}function d(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>u});var l=n(96540);const t={},a=l.createContext(t);function i(e){const r=l.useContext(a);return l.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function u(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),l.createElement(a.Provider,{value:r},e.children)}}}]);