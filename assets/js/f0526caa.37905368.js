"use strict";(self.webpackChunkhades_2_mod_wiki=self.webpackChunkhades_2_mod_wiki||[]).push([[61191],{41607:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>d});var l=t(74848),i=t(28453);const a={},o=void 0,r={id:"h2m-docs/tables/toml",title:"toml",description:"Usage",source:"@site/docs/h2m-docs/tables/toml.md",sourceDirName:"h2m-docs/tables",slug:"/h2m-docs/tables/toml",permalink:"/Hades2ModWiki/docs/h2m-docs/tables/toml",draft:!1,unlisted:!1,editUrl:"https://github.com/sgg-modding/hades2modwiki/tree/main/docs/h2m-docs/tables/toml.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Table: rom.tolk",permalink:"/Hades2ModWiki/docs/h2m-docs/tables/rom.tolk"},next:{title:"In-Game Definitions",permalink:"/Hades2ModWiki/docs/category/in-game-definitions"}},s={},d=[{value:"Usage",id:"usage",level:2},{value:"Decoding",id:"decoding",level:3},{value:"Decoding Options",id:"decoding-options",level:4},{value:"<code>temporalTypesAsUserData</code>",id:"temporaltypesasuserdata",level:5},{value:"<code>formattedIntsAsUserData</code>",id:"formattedintsasuserdata",level:5},{value:"Encoding",id:"encoding",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Inline Tables",id:"inline-tables",level:3},{value:"TOML Conversion",id:"toml-conversion",level:3},{value:"JSON",id:"json",level:4},{value:"YAML",id:"yaml",level:4},{value:"Output Formatting",id:"output-formatting",level:3},{value:"Formatting Integers",id:"formatting-integers",level:4},{value:"Formatting TOML, JSON, or YAML",id:"formatting-toml-json-or-yaml",level:4},{value:"Date and Time",id:"date-and-time",level:3}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,l.jsx)(n.h3,{id:"decoding",children:"Decoding"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"local tomlStr = [[\na = 1275892\nb = 'Hello, World!'\nc = true\nd = 124.2548\n\n[e]\nf = [ 1, 2, 3, '4', 5.142 ]\ng = 1979-05-27\nh = 07:32:00\ni = 1979-05-27T07:32:00-07:00\n]]\n\n-- Decode from string\nlocal succeeded, table = pcall(toml.decode, tomlStr)\n\n-- Decode from file\nsucceeded, table = pcall(toml.decodeFromFile, \"configuration.toml\")\n\nif succeeded then\n-- Use `table`.\nelse\n-- Error details are in `table`.\nend\n"})}),"\n",(0,l.jsx)(n.h4,{id:"decoding-options",children:"Decoding Options"}),"\n",(0,l.jsx)(n.h5,{id:"temporaltypesasuserdata",children:(0,l.jsx)(n.code,{children:"temporalTypesAsUserData"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"temporalTypesAsUserData = true"}),": The userdata types ",(0,l.jsx)(n.code,{children:"toml.Date"}),", ",(0,l.jsx)(n.code,{children:"toml.Time"}),", and ",(0,l.jsx)(n.code,{children:"toml.DateTime"})," are used to represent TOML date and time types."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"temporalTypesAsUserData = false"}),": Lua tables are used to represent TOML date and time types."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:["The default value is ",(0,l.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n",(0,l.jsx)(n.h5,{id:"formattedintsasuserdata",children:(0,l.jsx)(n.code,{children:"formattedIntsAsUserData"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"formattedIntsAsUserData = true"}),": The userdata type ",(0,l.jsx)(n.code,{children:"toml.Int"})," is used to represent integers in octal, binary, or hexadecimal format."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"formattedIntsAsUserData = false"}),": Integers in octal, binary, or hexadecimal format will be represented in decimal."]}),"\n"]}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:["The default value is ",(0,l.jsx)(n.code,{children:"false"})]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"local tomlStr = [[\ndate = 1979-05-27\ntime = 07:32:00\ndatetime = 1979-05-27T07:32:00-07:00\n\nhexadecimal = 0x16C3\nbinary = 0b110110011011\noctal = 0x169F\n]]\n\nlocal table1 = toml.decode(tomlStr, { temporalTypesAsUserData = true, formattedIntsAsUserData = true })\nlocal table2 = toml.decode(tomlStr, { temporalTypesAsUserData = false, formattedIntsAsUserData = false })\n"})}),"\n",(0,l.jsx)(n.h3,{id:"encoding",children:"Encoding"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'-- Inline tables: https://toml.io/en/v1.0.0#inline-table\nlocal inlineTable = {\n\ta = 1275892,\n\tb = "Hello, World!",\n\tc = true,\n\td = 124.2548,\n}\n\n-- Make the table inline.\nsetmetatable(inlineTable, { inline = true })\n\nlocal table = {\n\n\te = {\n\t\tf = { 1, 2, 3, "4", 5.142 },\n\t\tg = toml.Date.new(1979,   05,     27),\n\t\t--                year   month   day\n\n\t\th = toml.Time.new( 7,     32,      0,        0),\n\t\t--                hour   minute  second   nanoSecond\n\n\t\ti = toml.DateTime.new(\n\t\t\ttoml.Date.new(1979, 05, 27),\n\t\t\ttoml.Time.new(7, 32, 0, 0),\n\n\t\t\ttoml.TimeOffset.new(  -7,     0)\n\t\t\t--                   hour   minute\n\t\t)\n\t},\n\tinlineTable = inlineTable\n}\n\n-- Encode to string\nlocal succeeded, documentOrErrorMessage = pcall(toml.encode, table)\n\n-- Encode to file, this will **append** to the file.\nsucceeded, documentOrErrorMessage = pcall(toml.encodeToFile, table, "configuration.toml")\n\n-- Encode to file, this will **overwrite** the file.\nsucceeded, documentOrErrorMessage = pcall(toml.encodeToFile, table, { file = "configuration.toml", overwrite = true })\n\nif succeeded then\n\t-- Successfully encoded to string / wrote to file\n\tprint(tomlDocumentOrErrorMessage)\nelse\n-- Error occurred\n\tprint(tomlDocumentOrErrorMessage)\nend\n\n--[[\ninlineTable = { a = 1275892, b = "Hello, World!", c = true, d = 124.2548 }\n\n[e]\nf = [ 1, 2, 3, "4", 5.1420000000000003 ]\ng = 1979-05-27\nh = 07:32:00\ni = 1979-05-27T07:32:00-07:00\n--]]\n'})}),"\n",(0,l.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"local tomlStr = [[\na = 1275892\nb = 'Hello, World!'\nc = true\nd = 124. # <-- ERROR: \"Expected decimal digit\"\n\n[e]\nf = [ 1, 2, 3, '4', 5.142 ]\ng = 1979-05-27\nh = 07:32:00\ni = 1979-05-27T07:32:00-07:00\n]]\n\nlocal succeeded, table = pcall(toml.decode, tomlStr)\n\nif succeeded then\n\t-- Use decoded table.\nelse\n\t-- Error details are in `table`.\nend\n"})}),"\n",(0,l.jsx)(n.h3,{id:"inline-tables",children:"Inline Tables"}),"\n",(0,l.jsxs)(n.p,{children:["Use ",(0,l.jsx)(n.code,{children:"setmetatable(myTable, { inline = true })"})," to create an ",(0,l.jsx)(n.a,{href:"https://toml.io/en/v1.0.0#inline-table",children:"inline table"}),"."]}),"\n",(0,l.jsx)(n.h3,{id:"toml-conversion",children:"TOML Conversion"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"local tomlStr = [[\na = 1275892\nb = 'Hello, World!'\nc = true\nd = 124.2548\n\n[e]\nf = [ 1, 2, 3, '4', 5.142 ]\ng = 1979-05-27\nh = 07:32:00\ni = 1979-05-27T07:32:00-07:00\n]]\n"})}),"\n",(0,l.jsx)(n.h4,{id:"json",children:"JSON"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"-- Convert from a string\nlocal json = toml.toJSON(tomlStr)\n\n-- or from a table\njson = toml.toJSON(toml.decode(tomlStr))\n\nprint(json)\n"})}),"\n",(0,l.jsx)(n.h4,{id:"yaml",children:"YAML"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"local yaml = toml.toYAML(tomlStr)\nyaml = toml.toYAML(toml.decode(tomlStr))\nprint(yaml)\n"})}),"\n",(0,l.jsx)(n.h3,{id:"output-formatting",children:"Output Formatting"}),"\n",(0,l.jsx)(n.h4,{id:"formatting-integers",children:"Formatting Integers"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"local normalIntegers = {\n\tint1 = 2582\n\tint2 = 3483\n\tint3 = 5971\n}\nprint(toml.encode(normalIntegers))\n--[[\nint1 = 2582\nint2 = 3483\nint3 = 5791\n--]]\n\nlocal formattedIntegers = {\n\tint1 = toml.Int.new(2582, toml.formatting.int.octal),\n\tint2 = toml.Int.new(3483, toml.formatting.int.binary),\n\tint3 = toml.Int.new(5791, toml.formatting.int.hexadecimal)\n}\n\nprint(toml.encode(formattedIntegers))\n--[[\nint1 = 0o5026\nint2 = 0b110110011011\nint3 = 0x169F\n--]]\n\n-- Use `int` and `flags` properties to assign and retrieve flags and integers.\nlocal int = formattedIntegers.int1.int\nlocal flags = formattedIntegers.int1.flags\n\nformattedIntegers.int1.int = 5827\nformattedIntegers.int1.flags = toml.formatting.int.hexadecimal\n\nprint(toml.encode(formattedIntegers))\n--[[\nint1 = 0x16C3\nint2 = 0b110110011011\nint3 = 0x169F\n--]]\n"})}),"\n",(0,l.jsx)(n.h4,{id:"formatting-toml-json-or-yaml",children:"Formatting TOML, JSON, or YAML"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"toml.encode"}),", ",(0,l.jsx)(n.code,{children:"toml.encodeToFile"}),", ",(0,l.jsx)(n.code,{children:"toml.toJSON"}),", and ",(0,l.jsx)(n.code,{children:"toml.toYAML"})," all take an optional second parameter: a table containing keys that disable or enable different formatting options.\nPassing an empty table removes all options, while not providing a table will use the default options."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"{\n\t--- Dates and times will be emitted as quoted strings.\n\tquoteDatesAndTimes = false,\n\n\t--- Infinities and NaNs will be emitted as quoted strings.\n\tquoteInfinitesAndNaNs = false,\n\n\t--- Strings will be emitted as single-quoted literal strings where possible.\n\tallowLiteralStrings = false,\n\n\t--- Strings containing newlines will be emitted as triple-quoted 'multi-line' strings where possible.\n\tallowMultiLineStrings = false,\n\n\t--- Allow real tab characters in string literals (as opposed to the escaped form `\\t`).\n\tallowRealTabsInStrings = false,\n\n\t--- Allow non-ASCII characters in strings (as opposed to their escaped form, e.g. `\\u00DA`).\n\tallow_unicode_strings = true,\n\n\t--- Allow integers with `toml.formatting.int.binary` to be emitted as binary.\n\tallowBinaryIntegers = true,\n\n\t--- Allow integers with `toml.formatting.int.octal` to be emitted as octal.\n\tallowOctalIntegers = true,\n\n\t--- Allow integers with `toml.formatting.int.hexadecimal` to be emitted as hexadecimal.\n\tallowHexadecimalIntegers = true,\n\n\t--- Apply indentation to tables nested within other tables/arrays.\n\tindentSubTables = true,\n\n\t--- Apply indentation to array elements when the array is forced to wrap over multiple lines.\n\tindentArrayElements = true,\n\n\t--- Combination of `indentSubTables` and `indentArrayElements`.\n\tindentation = true,\n\n\t--- Emit floating-point values with relaxed (human-friendly) precision.\n\t---\n\t--- Warning: Setting this flag may cause serialized documents to no longer round-\n\t--- trip correctly since floats might have a less precise value upon being written out\n\t--- than they did when being read in. Use this flag at your own risk.\n\trelaxedFloatPrecision = false,\n\n\t--- Avoids the use of whitespace around key-value pairs.\n\tterseKeyValuePairs = false\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"date-and-time",children:"Date and Time"}),"\n",(0,l.jsxs)(n.p,{children:["(Creating Date, Time, and DateTime is shown in ",(0,l.jsx)(n.a,{href:"#encoding",children:"the encoding section"}),")"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"\trecord Date\n\t\tyear: number\n\t\tmonth: number\n\t\tday: number\n\n\t\tnew: function(year: number, month: number, day: number): Date\n\tend\n\n\trecord Time\n\t\thour: number\n\t\tminute: number\n\t\tsecond: number\n\t\tnanoSecond: number\n\n\t\tnew: function (\n\t\t\thour: number,\n\t\t\tminute: number,\n\t\t\tsecond: number,\n\t\t\tnanoSecond: number\n\t\t): Time\n\tend\n\n\trecord TimeOffset\n\t\tminutes: number\n\n\t\tnew: function (hours: number, minutes: number): TimeOffset\n\tend\n\n\trecord DateTime\n\t\tdate: Date\n\t\ttime: Time\n\t\tTimeOffset: nil | TimeOffset\n\n\t\tnew: function(date: Date, time: Time): DateTime\n\t\tnew: function(date: Date, time: Time, timeOffset: TimeOffset): DateTime\n\tend\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:["The comments for the options are from ",(0,l.jsx)(n.a,{href:"https://marzer.github.io/tomlplusplus/namespacetoml.html#a2102aa80bc57783d96180f36e1f64f6a",children:"the tomlplusplus documentation"})]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var l=t(96540);const i={},a=l.createContext(i);function o(e){const n=l.useContext(a);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),l.createElement(a.Provider,{value:n},e.children)}}}]);